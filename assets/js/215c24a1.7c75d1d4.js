"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[325],{5318:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),h=i,u=c["".concat(l,".").concat(h)]||c[h]||m[h]||r;return n?a.createElement(u,o(o({ref:t},d),{},{components:n})):a.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8138:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return s}});var a=n(2685),i=(n(7378),n(5318));const r={id:"python",title:"Python User Guide"},o=void 0,p={unversionedId:"python",id:"python",title:"Python User Guide",description:"Perspective for Python uses the exact same C++ data engine used by the",source:"@site/docs/python.md",sourceDirName:".",slug:"/python",permalink:"/docs/python",draft:!1,tags:[],version:"current",frontMatter:{id:"python",title:"Python User Guide"},sidebar:"tutorialSidebar",previous:{title:"JavaScript User Guide",permalink:"/docs/js"},next:{title:"Table",permalink:"/docs/table"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"PyPI",id:"pypi",level:3},{value:"Anaconda",id:"anaconda",level:3},{value:"Jupyterlab",id:"jupyterlab",level:3},{value:"<code>Table</code>",id:"table",level:2},{value:"Pandas &amp; Numpy Support",id:"pandas--numpy-support",level:3},{value:"Schemas &amp; Supported Data Types",id:"schemas--supported-data-types",level:3},{value:"Loading Custom Objects",id:"loading-custom-objects",level:4},{value:"Time Zone Handling",id:"time-zone-handling",level:4},{value:"Pandas Timestamps",id:"pandas-timestamps",level:5},{value:"Callbacks and Events",id:"callbacks-and-events",level:3},{value:"<code>PerspectiveManager</code>",id:"perspectivemanager",level:2},{value:"Async Mode",id:"async-mode",level:3},{value:"Multi-threading",id:"multi-threading",level:4},{value:"Hosting <code>Table</code> and <code>View</code> instances",id:"hosting-table-and-view-instances",level:3},{value:"Client/Server Replicated Mode",id:"clientserver-replicated-mode",level:3},{value:"Server-only Mode",id:"server-only-mode",level:3},{value:"<code>PerspectiveWidget</code>",id:"perspectivewidget",level:2},{value:"Creating a widget",id:"creating-a-widget",level:3},{value:"<code>PerspectiveRenderer</code>",id:"perspectiverenderer",level:2},{value:"<code>PerspectiveTornadoHandler</code>",id:"perspectivetornadohandler",level:2},{value:"Python setup",id:"python-setup",level:3},{value:"JavaScript setup",id:"javascript-setup",level:3}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Perspective for Python uses the exact same C++ data engine used by the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/js"},"WebAssembly version"),". The library consists of many of the same\nabstractions and API as in JavaScript, as well as Python-specific data loading\nsupport for ",(0,i.kt)("a",{parentName:"p",href:"https://numpy.org/"},"NumPy"),", ",(0,i.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/"},"Pandas"),"\n(and ",(0,i.kt)("a",{parentName:"p",href:"https://arrow.apache.org/"},"Apache Arrow"),", as in JavaScript)."),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," provides a session manager suitable for\nintegration into server systems such as\n",(0,i.kt)("a",{parentName:"p",href:"https://www.tornadoweb.org/en/stable/websocket.html"},"Tornado websockets"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.aiohttp.org/en/stable/web_quickstart.html#websockets"},"AIOHTTP"),", or\n",(0,i.kt)("a",{parentName:"p",href:"https://www.starlette.io/websockets/"},"Starlette"),"/",(0,i.kt)("a",{parentName:"p",href:"https://fastapi.tiangolo.com/advanced/websockets/"},"FastAPI"),",\nwhich allows fully ",(0,i.kt)("em",{parentName:"p"},"virtual")," Perspective tables to be interacted with by\nmultiple ",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>")," in a web browser. You can also interact with a\nPerspective table from python clients, and to that end client libraries are\nimplemented for both Tornado and AIOHTTP."),(0,i.kt)("p",null,"As ",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>")," will only consume the data necessary to render the\ncurrent screen, this runtime mode allows ",(0,i.kt)("em",{parentName:"p"},"ludicrously-sized")," datasets with\ninstant-load after they've been manifest on the server (at the expense of\nnetwork latency on UI interaction)."),(0,i.kt)("p",null,"The included ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," allows running such a viewer in\n",(0,i.kt)("a",{parentName:"p",href:"https://jupyterlab.readthedocs.io/en/stable/"},"JupyterLab")," in either server or\nclient (via WebAssembly) mode, and the included ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveTornadoHandler"),"\nmakes it simple to extend a Tornado server with virtual Perspective support."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective")," module exports several tools:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Table"),", the table constructor for Perspective, which implements the ",(0,i.kt)("inlineCode",{parentName:"li"},"table"),"\nand ",(0,i.kt)("inlineCode",{parentName:"li"},"view")," API in the same manner as the JavaScript library."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveWidget")," the JupyterLab widget for interactive visualization."),(0,i.kt)("li",{parentName:"ul"},"Perspective webserver handlers that interface seamlessly with\n",(0,i.kt)("inlineCode",{parentName:"li"},"<perspective-viewer>")," in JavaScript.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveTornadoHandler")," for ",(0,i.kt)("a",{parentName:"li",href:"https://www.tornadoweb.org/"},"Tornado")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveStarletteHandler")," for ",(0,i.kt)("a",{parentName:"li",href:"https://www.starlette.io/"},"Starlette"),"\nand ",(0,i.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com"},"FastAPI")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveAIOHTTPHandler")," for ",(0,i.kt)("a",{parentName:"li",href:"https://docs.aiohttp.org"},"AIOHTTP"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tornado_websocket"),", a Tornado-based websocket client"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aiohttp_websocket")," an AIOHTTP-based websocket client"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager")," the session manager for a shared server deployment of\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective-python"),".")),(0,i.kt)("p",null,"This user's guide provides an overview of the most common ways to use\nPerspective in Python: the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," API, the JupyterLab widget, and the Tornado\nhandler."),(0,i.kt)("p",null,"For an understanding of Perspective's core concepts, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/table"},"Table"),",\n",(0,i.kt)("a",{parentName:"p",href:"/docs/view"},"View"),", and ",(0,i.kt)("a",{parentName:"p",href:"/docs/server"},"Data Binding")," documentation. For API\ndocumentation, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/obj/perspective-python"},"Python API"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/tree/master/examples"},"More Examples")," are\navailable on GitHub."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," contains full bindings to the Perspective API, a JupyterLab\nwidget, and a WebSocket handlers for several webserver libraries that allow you\nto host Perspective using server-side Python."),(0,i.kt)("p",null,"In addition to supporting row/columnar formats of data using ",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"pandas.DataFrame"),", dictionaries of NumPy arrays, NumPy structured arrays, and\nNumPy record arrays are all supported in ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python"),"."),(0,i.kt)("h3",{id:"pypi"},"PyPI"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," can be installed from ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org"},"PyPI")," via ",(0,i.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install perspective-python\n")),(0,i.kt)("h3",{id:"anaconda"},"Anaconda"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," can also be installed for ",(0,i.kt)("a",{parentName:"p",href:"https://anaconda.org/"},"Anaconda"),"\nvia ",(0,i.kt)("a",{parentName:"p",href:"https://conda-forge.org"},"Conda Forge")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"conda install -c conda-forge perspective\n")),(0,i.kt)("h3",{id:"jupyterlab"},"Jupyterlab"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," is a JupyterLab widget that implements the same API as\n",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>"),", allowing for fast, intuitive\ntransformations/visualizations of various data formats within JupyterLab."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," is compatible with Jupyterlab 3 and Jupyter Notebook 6 via a\n",(0,i.kt)("a",{parentName:"p",href:"https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html#prebuilt-extensions"},"prebuilt extension"),".\nTo use it, simply install ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," and the extensions should be\navailable."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python"),"'s JupyterLab extension also provides convenient builtin\nviewers for ",(0,i.kt)("inlineCode",{parentName:"p"},"csv"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"arrow")," files. Simply right-click on a file with\nthis extension and choose the appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"Perpective")," option from the context\nmenu."),(0,i.kt)("h2",{id:"table"},(0,i.kt)("inlineCode",{parentName:"h2"},"Table")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," can be created from a dataset or a schema, the specifics of which are\n",(0,i.kt)("a",{parentName:"p",href:"#loading-data-with-table"},"discussed")," in the JavaScript section of the user's\nguide. In Python, however, Perspective supports additional data types that are\ncommonly used when processing data:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numpy.ndarray")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bytes")," (encoding an Apache Arrow)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"objects")," (either extracting a repr or via reference)")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," is created in a similar fashion to its JavaScript equivalent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import date, datetime\nimport numpy as np\nimport pandas as pd\nimport perspective\n\ndata = pd.DataFrame({\n    "int": np.arange(100),\n    "float": [i * 1.5 for i in range(100)],\n    "bool": [True for i in range(100)],\n    "date": [date.today() for i in range(100)],\n    "datetime": [datetime.now() for i in range(100)],\n    "string": [str(i) for i in range(100)]\n})\n\ntable = perspective.Table(data, index="float")\n')),(0,i.kt)("p",null,"Likewise, a ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," can be created via the ",(0,i.kt)("inlineCode",{parentName:"p"},"view()")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(group_by=["float"], filter=[["bool", "==", True]])\ncolumn_data = view.to_dict()\nrow_data = view.to_records()\n')),(0,i.kt)("h3",{id:"pandas--numpy-support"},"Pandas & Numpy Support"),(0,i.kt)("p",null,"Perspective supports dictionaries of one-dimensional ",(0,i.kt)("inlineCode",{parentName:"p"},"numpy.ndarray"),", as well as\nstructured arrays and record arrays. When passing in dictionaries of NumPy\narrays, make sure that your dataset contains only NumPy arrays, and not a\nmixture of arrays and Python lists \u2014 this will raise an exception. Numpy\nstructured/record arrays are parsed according to their field name and dtype."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Table")," can also be constructed from ",(0,i.kt)("inlineCode",{parentName:"p"},"pandas.DataFrame")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pandas.Series"),"\nobjects. Because Perspective is designed for applying its own transformations on\ntop of a flat dataset, dataframes that are passed in will be flattened and have\nits ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," treated as another column (through the\n",(0,i.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reset_index.html"},(0,i.kt)("inlineCode",{parentName:"a"},"reset_index()")),"\nmethod)."),(0,i.kt)("p",null,"If the dataframe does not have an index set, an integer-typed column named\n",(0,i.kt)("inlineCode",{parentName:"p"},'"index"')," is created. If you want to preserve the indexing behavior of the\ndataframe passed into Perspective, simply create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," with\n",(0,i.kt)("inlineCode",{parentName:"p"},'index="index"')," as a keyword argument. This tells Perspective to once again\ntreat the index as a primary key:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'data.set_index("datetime")\ntable = perspective.Table(data, index="index")\n')),(0,i.kt)("h3",{id:"schemas--supported-data-types"},"Schemas & Supported Data Types"),(0,i.kt)("p",null,"Unlike JavaScript, where schemas must be created using string representations of\ntheir types, ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," leverages Python's type system for schema\ncreation. A schema can be created with the following types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datetime.date")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datetime.datetime")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"object"))),(0,i.kt)("h4",{id:"loading-custom-objects"},"Loading Custom Objects"),(0,i.kt)("p",null,"Custom objects can also be loaded into Perspective by using ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," in the\nschema, or implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"_psp_repr_")," to return ",(0,i.kt)("inlineCode",{parentName:"p"},"object"),". Perspective stores a\nreference to your object as an unsigned 64-bit integer (e.g. a pointer), and\nuses ",(0,i.kt)("inlineCode",{parentName:"p"},"__repr__")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"_psp_repr")," if implemented) to represent the object."),(0,i.kt)("p",null,"You can customize how Perspective extracts data from your objects by\nimplementing these two methods into your object:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_psp_repr_"),": Since ",(0,i.kt)("inlineCode",{parentName:"li"},"__repr__")," can only return strings, this lets you return\nother values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_psp_dtype_"),": Perpspective will look at this to determine how to cast your\nobjects' repr.")),(0,i.kt)("h4",{id:"time-zone-handling"},"Time Zone Handling"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"},'"Naive"'),"\ndatetimes are assumed to be local time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/datetime.html#aware-and-naive-objects"},'"Aware"'),"\ndatetimes use the time zone specified in the ",(0,i.kt)("inlineCode",{parentName:"li"},"tzinfo"),".")),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"datetime")," columns (regardless of input time zone) are output to the user as\n",(0,i.kt)("inlineCode",{parentName:"p"},"datetime.datetime")," objects in ",(0,i.kt)("em",{parentName:"p"},"local time")," according to the Python runtime."),(0,i.kt)("p",null,"This behavior is consistent with Perspective's behavior in JavaScript. For more\ndetails, see this in-depth\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/pull/867"},"explanation")," of\n",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," semantics around time zone handling."),(0,i.kt)("h5",{id:"pandas-timestamps"},"Pandas Timestamps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Naive ",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.Timestamp")," objects are ",(0,i.kt)("em",{parentName:"li"},"always")," treated as UTC times, and will\nbe converted to local time when output to the user."),(0,i.kt)("li",{parentName:"ul"},"Aware ",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.Timestamp")," objects use the time zone specified in ",(0,i.kt)("inlineCode",{parentName:"li"},"tzinfo"),".\nUse ",(0,i.kt)("inlineCode",{parentName:"li"},"tz_localize")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"tz_convert")," to provide the ",(0,i.kt)("inlineCode",{parentName:"li"},"Timestamp")," with a time\nzone.")),(0,i.kt)("h3",{id:"callbacks-and-events"},"Callbacks and Events"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," allows for ",(0,i.kt)("inlineCode",{parentName:"p"},"on_update")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"on_delete")," callbacks to be\nset\u2014simply call ",(0,i.kt)("inlineCode",{parentName:"p"},"on_update")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"on_delete")," with a reference to a function or a\nlambda without any parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def update_callback():\n    print("Updated!")\n\n# set the update callback\nview.on_update(update_callback)\n\n\ndef delete_callback():\n    print("Deleted!")\n\n# set the delete callback\nview.on_delete(delete_callback)\n\n# set a lambda as a callback\nview.on_delete(lambda: print("Deleted x2!"))\n')),(0,i.kt)("p",null,"If the callback is a named reference to a function, it can be removed with\n",(0,i.kt)("inlineCode",{parentName:"p"},"remove_update")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"remove_delete"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"view.remove_update(update_callback)\nview.remove_delete(delete_callback)\n")),(0,i.kt)("p",null,"Callbacks defined with a lambda function cannot be removed, as lambda functions\nhave no identifier."),(0,i.kt)("h2",{id:"perspectivemanager"},(0,i.kt)("inlineCode",{parentName:"h2"},"PerspectiveManager")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," offers an interface for hosting multiple\n",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.View")," instances, extending their interfaces\nto operate with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/js"},"JavaScript library")," over a websocket connection.\n",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," is required to enable ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," to\n",(0,i.kt)("a",{parentName:"p",href:"/docs/js#remote-perspective-via-perspective-python-and-tornado"},"operate remotely"),"\nusing a websocket API."),(0,i.kt)("h3",{id:"async-mode"},"Async Mode"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective")," will run with a synchronous interface. Using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager.set_loop_callback()")," method, ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective")," can be configured\nto defer the application of side-effectful calls like ",(0,i.kt)("inlineCode",{parentName:"p"},"update()")," to an event\nloop, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"tornado.ioloop.IOLoop"),". There are a few important differences\nwhen running ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," in this mode:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Calls to methods like ",(0,i.kt)("inlineCode",{parentName:"li"},"update()")," will return immediately, and the reciprocal\n",(0,i.kt)("inlineCode",{parentName:"li"},"on_update()")," callbacks will be invoked on an event later scheduled. Calls\nto other methods which require an up-to-date object, but will still\nsynchronously apply the pending update."),(0,i.kt)("li",{parentName:"ul"},"Updates will be ",(0,i.kt)("em",{parentName:"li"},"conflated")," when multiple calls to ",(0,i.kt)("inlineCode",{parentName:"li"},"update()")," occur before\nthe scheduled application. In such cases, you may receive a single\n",(0,i.kt)("inlineCode",{parentName:"li"},"on_update()")," notification for multiple ",(0,i.kt)("inlineCode",{parentName:"li"},"update()")," calls.")),(0,i.kt)("p",null,"For example, using Tornado ",(0,i.kt)("inlineCode",{parentName:"p"},"IOLoop")," you can create a dedicated thread or pool\nfor a ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"manager = perspective.PerspectiveManager()\n\ndef perspective_thread():\n    loop = tornado.ioloop.IOLoop()\n    manager.set_loop_callback(loop.add_callback)\n    loop.start()\n\nthread = threading.Thread(target=perspective_thread)\nthread.daemon = True\nthread.start()\n")),(0,i.kt)("h4",{id:"multi-threading"},"Multi-threading"),(0,i.kt)("p",null,"When running in Async mode, Perspective will release the GIL while dispatching\nto an internal thread pool for some operations, enabling better parallelism and\noverall better server performance. However, Perspective's Python interface\nitself will still process queries in a single queue. To enable parallel query\nprocessing, call ",(0,i.kt)("inlineCode",{parentName:"p"},"set_loop_callback")," with a multi-threaded executor such as\n",(0,i.kt)("inlineCode",{parentName:"p"},"concurrent.futures.ThreadPoolExecutor"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def perspective_thread():\n    loop = tornado.ioloop.IOLoop()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        manager.set_loop_callback(loop.run_in_executor, executor)\n        loop.start()\n")),(0,i.kt)("h3",{id:"hosting-table-and-view-instances"},"Hosting ",(0,i.kt)("inlineCode",{parentName:"h3"},"Table")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"View")," instances"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager"),' has the ability to "host" ',(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.View")," instances. Hosted tables/views can have their methods called\nfrom other sources than the Python server, i.e. by a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-viewer"),"\nrunning in a JavaScript client over the network, interfacing with\n",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," through the websocket API."),(0,i.kt)("p",null,"The server has full control of all hosted ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," instances, and can\ncall any public API method on hosted instances. This makes it extremely easy to\nstream data to a hosted ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," using ",(0,i.kt)("inlineCode",{parentName:"p"},".update()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'manager = PerspectiveManager()\ntable = Table(data)\nmanager.host_table("data_source", table)\n\nfor i in range(10):\n    # updates continue to propagate automatically\n    table.update(new_data)\n')),(0,i.kt)("p",null,"In situations where clients should only be able to view the table and not modify\nit through ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"delete"),", etc., initialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," with\n",(0,i.kt)("inlineCode",{parentName:"p"},"lock=True"),", or call the ",(0,i.kt)("inlineCode",{parentName:"p"},"lock()")," method on a manager instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# lock prevents clients from calling methods that may mutate the state\n# of the table.\nmanager = PerspectiveManager(lock=True)\ntable = Table(data)\nmanager.host_table("data_source", table)\n')),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," instance can host as many ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"s as\nnecessary, but each ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," should only be hosted by ",(0,i.kt)("em",{parentName:"p"},"one")," ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager"),"."),(0,i.kt)("p",null,"To host a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),", call the corresponding method on an instance of\n",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," with a string name and the instance to be hosted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'manager = PerspectiveManager()\ntable = Table(data)\nmanager.host_table("data_source", table)\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," provided is important, as it enables Perspective in JavaScript to\nlook up a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and get a handle to it over the network. This enables several\npowerful server/client implementations of Perspective, as explained in the next\nsection."),(0,i.kt)("h3",{id:"clientserver-replicated-mode"},"Client/Server Replicated Mode"),(0,i.kt)("p",null,"Using Tornado and\n",(0,i.kt)("a",{parentName:"p",href:"/docs/python#perspectivetornadohandler"},(0,i.kt)("inlineCode",{parentName:"a"},"PerspectiveTornadoHandler")),", as well as\n",(0,i.kt)("inlineCode",{parentName:"p"},"Perspective"),'\'s JavaScript library, we can set up "distributed" Perspective\ninstances that allows multiple browser ',(0,i.kt)("inlineCode",{parentName:"p"},"perspective-viewer")," clients to read from\na common ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," server, as in the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/tree/master/examples/python-tornado"},"Tornado Example Project"),"."),(0,i.kt)("p",null,"This architecture works by maintaining two ",(0,i.kt)("inlineCode",{parentName:"p"},"Tables"),"\u2014one on the server, and one\non the client that mirrors the server's ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," automatically using ",(0,i.kt)("inlineCode",{parentName:"p"},"on_update"),".\nAll updates to the table on the server are automatically applied to each client,\nwhich makes this architecture a natural fit for streaming dashboards and other\ndistributed use-cases. In conjunction with ",(0,i.kt)("a",{parentName:"p",href:"#async-mode"},"Async Mode"),",\ndistributed Perspective offers consistently high performance over large numbers\nof clients and large datasets."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"server.py"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from perspective import Table, PerspectiveManager, PerspectiveTornadoHandler\n\n# Create an instance of PerspectiveManager, and host a Table\nMANAGER = PerspectiveManager()\nTABLE = Table(data)\n\n# The Table is exposed at `localhost:8888/websocket` with the name `data_source`\nMANAGER.host_table("data_source", TABLE)\n\napp = tornado.web.Application([\n    (r"/", MainHandler),\n    # create a websocket endpoint that the client JavaScript can access\n    (r"/websocket", PerspectiveTornadoHandler, {"manager": MANAGER, "check_origin": True})\n])\n\n# Start the Tornado server\napp.listen(8888)\nloop = tornado.ioloop.IOLoop.current()\nloop.start()\n')),(0,i.kt)("p",null,"Instead of calling ",(0,i.kt)("inlineCode",{parentName:"p"},"load(server_table)"),", create a ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"server_table"),"\nand pass that into ",(0,i.kt)("inlineCode",{parentName:"p"},"viewer.load()"),". This will automatically register an\n",(0,i.kt)("inlineCode",{parentName:"p"},"on_update")," callback that synchronizes state between the server and the client."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("em",{parentName:"em"},"index.html"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<perspective-viewer id="viewer" editable></perspective-viewer>\n\n<script>\n    window.addEventListener("DOMContentLoaded", async function () {\n        // Create a client that expects a Perspective server\n        // to accept connections at the specified URL.\n        const websocket = perspective.websocket(\n            "ws://localhost:8888/websocket"\n        );\n\n        // Get a handle to the Table on the server\n        const server_table = websocket.open_table("data_source_one");\n\n        // Create a new view\n        const server_view = await table.view();\n\n        // Create a Table on the client using `perspective.worker()`\n        const worker = perspective.worker();\n        const client_table = await worker.table(view);\n\n        // Load the client table in the `<perspective-viewer>`.\n        document.getElementById("viewer").load(client_table);\n    });\n<\/script>\n')),(0,i.kt)("p",null,"For a more complex example that offers distributed editing of the server\ndataset, see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/blob/master/examples/python-tornado/client_server_editing.html"},"client_server_editing.html"),"."),(0,i.kt)("p",null,"We also provide examples for Starlette/FastAPI and AIOHTTP:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/finos/perspective/tree/master/examples/python-starlette"},"Starlette Example Project"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/finos/perspective/tree/master/examples/python-aiohttp"},"AIOHTTP Example Project"),".")),(0,i.kt)("h3",{id:"server-only-mode"},"Server-only Mode"),(0,i.kt)("p",null,"The server setup is identical to ",(0,i.kt)("a",{parentName:"p",href:"#distributed-mode"},"Distributed Mode")," above,\nbut instead of creating a view, the client calls ",(0,i.kt)("inlineCode",{parentName:"p"},"load(server_table)"),": In\nPython, use ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveTornadoHandler")," to create a\nwebsocket server that exposes a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),". In this example, ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," is a proxy for\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," we created on the server. All API methods are available on\n",(0,i.kt)("em",{parentName:"p"},"proxies"),", the.g.us calling ",(0,i.kt)("inlineCode",{parentName:"p"},"view()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"schema()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"update()")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," will\npass those operations to the Python ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", execute the commands, and return\nthe result back to Javascript."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<perspective-viewer id="viewer" editable></perspective-viewer>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const websocket = perspective.websocket("ws://localhost:8888/websocket");\nconst table = websocket.open_table("data_source_one");\ndocument.getElementById("viewer").load(table);\n')),(0,i.kt)("h2",{id:"perspectivewidget"},(0,i.kt)("inlineCode",{parentName:"h2"},"PerspectiveWidget")),(0,i.kt)("p",null,"Building on top of the API provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),", the\n",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," is a JupyterLab plugin that offers the entire functionality\nof Perspective within the Jupyter environment. It supports the same API\nsemantics of ",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>"),", along with the additional data types\nsupported by ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," takes keyword arguments\nfor the managed ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"; additioanl arguments ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," will be passed\nto the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),". For convenience are the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/blob/master/python/perspective/perspective/core/aggregate.py"},(0,i.kt)("inlineCode",{parentName:"a"},"Aggregate")),",\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/blob/master/python/perspective/perspective/core/sort.py"},(0,i.kt)("inlineCode",{parentName:"a"},"Sort")),",\nand\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/finos/perspective/blob/master/python/perspective/perspective/core/plugin.py"},(0,i.kt)("inlineCode",{parentName:"a"},"Plugin")),"\nenums, which can be used as replacements to string values in the API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from perspective import PerspectiveWidget, Aggregate, Sort, Plugin\nw = perspective.PerspectiveWidget(\n    data,\n    plugin=Plugin.XBAR,\n    aggregates={"datetime": Aggregate.ANY},\n    sort=[["date", Sort.DESC]]\n)\n')),(0,i.kt)("h3",{id:"creating-a-widget"},"Creating a widget"),(0,i.kt)("p",null,"A widget is created through the ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," constructor, which takes as\nits first, required parameter a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),", a dataset, a schema, or\n",(0,i.kt)("inlineCode",{parentName:"p"},"None"),", which serves as a special value that tells the Widget to defer loading\nany data until later. In maintaining consistency with the Javascript API,\nWidgets cannot be created with empty dictionaries or lists\u2014",(0,i.kt)("inlineCode",{parentName:"p"},"None")," should be used\nif the intention is to await data for loading later on. A widget can be\nconstructed from a dataset:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from perspective import PerspectiveWidget, Table\nPerspectiveWidget(data, group_by=["date"])\n')),(0,i.kt)("p",null,".. or a schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'PerspectiveWidget({"a": int, "b": str})\n')),(0,i.kt)("p",null,".. or an instance of a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"table = Table(data)\nPerspectiveWidget(table)\n")),(0,i.kt)("p",null,".. or ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"PerspectiveWidget(None)\n")),(0,i.kt)("h2",{id:"perspectiverenderer"},(0,i.kt)("inlineCode",{parentName:"h2"},"PerspectiveRenderer")),(0,i.kt)("p",null,"Perspective also exposes a JS-only ",(0,i.kt)("inlineCode",{parentName:"p"},"mimerender-extension"),". This lets you view\n",(0,i.kt)("inlineCode",{parentName:"p"},"csv"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"arrow")," files directly from the file browser. You can see\nthis by right clicking one of these files and ",(0,i.kt)("inlineCode",{parentName:"p"},"Open With->CSVPerspective")," (or\n",(0,i.kt)("inlineCode",{parentName:"p"},"JSONPerspective")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrowPerspective"),"). Perspective will also install itself\nas the default handler for opening ",(0,i.kt)("inlineCode",{parentName:"p"},".arrow")," files."),(0,i.kt)("h2",{id:"perspectivetornadohandler"},(0,i.kt)("inlineCode",{parentName:"h2"},"PerspectiveTornadoHandler")),(0,i.kt)("p",null,"Perspective ships with a pre-built Tornado handler that makes integration with\n",(0,i.kt)("inlineCode",{parentName:"p"},"tornado.websockets")," extremely easy. This allows you to run an instance of\n",(0,i.kt)("inlineCode",{parentName:"p"},"Perspective")," on a server using Python, open a websocket to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", and\naccess the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," in JavaScript and through ",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>"),". All\ninstructions sent to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," are processed in Python, which executes the\ncommands, and returns its output through the websocket back to Javascript."),(0,i.kt)("h3",{id:"python-setup"},"Python setup"),(0,i.kt)("p",null,"To use the handler, we need to first have an instance of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and a\n",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager"),". The manager acts as the interface between the JavaScript\nand Python layers, implementing a JSON API that allows the two Perspective\nruntimes to communicate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"MANAGER = PerspectiveManager()\n")),(0,i.kt)("p",null,"Once the manager has been created, create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," instance and call\n",(0,i.kt)("inlineCode",{parentName:"p"},"host_table")," on the manager with a name, passing through a reference to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," you just created. ",(0,i.kt)("inlineCode",{parentName:"p"},"host_table()")," registers the Table with the manager\nand allows the manager to send instructions to the Table."),(0,i.kt)("p",null,"The name that you host the table under is important\u2014it acts as a unique accessor\non the JavaScript side, which will look for a Table hosted at the websocket with\nthe name you specify."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'TABLE = Table(data)\nMANAGER.host_table("data_source_one", TABLE)\n')),(0,i.kt)("p",null,"After the manager and table setup is complete, create a websocket endpoint and\nprovide it a reference to ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveTornadoHandler"),". You must provide the\nconfiguration object in the route tuple, and it must contain ",(0,i.kt)("inlineCode",{parentName:"p"},"manager"),", which is\na reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," you just created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'app = tornado.web.Application([\n    (r"/", MainHandler),\n    # create a websocket endpoint that the client JavaScript can access\n    (r"/websocket", PerspectiveTornadoHandler, {"manager": MANAGER, "check_origin": True})\n])\n')),(0,i.kt)("p",null,"Optionally, the configuration object can also include ",(0,i.kt)("inlineCode",{parentName:"p"},"check_origin"),", a boolean\nthat determines whether the websocket accepts requests from origins other than\nwhere the server is hosted. See\n",(0,i.kt)("a",{parentName:"p",href:"https://www.tornadoweb.org/en/stable/websocket.html#tornado.websocket.WebSocketHandler.check_origin"},"Tornado docs"),"\nfor more details."),(0,i.kt)("h3",{id:"javascript-setup"},"JavaScript setup"),(0,i.kt)("p",null,"Once the server is up and running, you can access the Table you just hosted\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.websocket")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"open_table()"),". First, create a client that\nexpects a Perspective server to accept connections at the specified URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const websocket = perspective.websocket("ws://localhost:8888/websocket");\n')),(0,i.kt)("p",null,"Next open the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," we created on the server by name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const table = websocket.open_table("data_source_one");\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"table")," is a proxy for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," we created on the server. All operations that\nare possible through the JavaScript API are possible on the Python API as well,\nthus calling ",(0,i.kt)("inlineCode",{parentName:"p"},"view()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"schema()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"update()")," etc. on ",(0,i.kt)("inlineCode",{parentName:"p"},"const table")," will pass\nthose operations to the Python ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", execute the commands, and return the\nresult back to JavaScript. Similarly, providing this ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," to a\n",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>")," instance will allow virtual rendering:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"viewer.load(table);\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective.websocket")," expects a Websocket URL where it will send instructions.\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"open_table")," is called, the name to a hosted Table is passed through, and a\nrequest is sent through the socket to fetch the Table. No actual ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"\ninstance is passed inbetween the runtimes; all instructions are proxied through\nwebsockets."),(0,i.kt)("p",null,"This provides for great flexibility \u2014 while ",(0,i.kt)("inlineCode",{parentName:"p"},"Perspective.js")," is full of\nfeatures, browser WebAssembly runtimes currently have some performance\nrestrictions on memory and CPU feature utilization, and the architecture in\ngeneral suffers when the dataset itself is too large to download to the client\nin full."),(0,i.kt)("p",null,"The Python runtime does not suffer from memory limitations, utilizes Apache\nArrow internal threadpools for threading and parallel processing, and generates\narchitecture optimized code, which currently makes it more suitable as a\nserver-side runtime than ",(0,i.kt)("inlineCode",{parentName:"p"},"node.js"),"."))}c.isMDXComponent=!0}}]);