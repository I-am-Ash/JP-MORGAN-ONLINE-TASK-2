"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[51],{5318:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return v}});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,v=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return a?n.createElement(v,i(i({ref:t},c),{},{components:a})):n.createElement(v,i({ref:t},c))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8189:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(7378),r=a(8944),l="tabItem_wHwb";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},5553:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(2685),r=a(7378),l=a(8944),i=a(6457),o=a(784),s=a(9947),p=a(3457),c="tabList_J5MA",u="tabItem_l0OV";function m(e){const{lazy:t,block:a,defaultValue:i,values:m,groupId:d,className:v}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,o.l)(g,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===i?i:i??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==h&&!g.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,s.U)(),[f,T]=(0,r.useState)(h),N=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=d){const e=k[d];null!=e&&e!==f&&g.some((t=>t.value===e))&&T(e)}const S=e=>{const t=e.currentTarget,a=N.indexOf(t),n=g[a].value;n!==f&&(x(t),T(n),null!=d&&w(d,String(n)))},C=e=>{let t=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const a=N.indexOf(e.currentTarget)+1;t=N[a]??N[0];break}case"ArrowLeft":{const a=N.indexOf(e.currentTarget)-1;t=N[a]??N[N.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},v)},g.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,key:t,ref:e=>N.push(e),onKeyDown:C,onClick:S},i,{className:(0,l.Z)("tabs__item",u,i?.className,{"tabs__item--active":f===t})}),a??t)}))),t?(0,r.cloneElement)(b.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==f})))))}function d(e){const t=(0,i.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},2473:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var n=a(2685),r=(a(7378),a(5318)),l=a(5553),i=a(8189);const o={id:"view",title:"View"},s=void 0,p={unversionedId:"view",id:"view",title:"View",description:"The View is Perspective's query and serialization interface. It represents a",source:"@site/docs/view.md",sourceDirName:".",slug:"/view",permalink:"/docs/view",draft:!1,tags:[],version:"current",frontMatter:{id:"view",title:"View"},sidebar:"tutorialSidebar",previous:{title:"Table",permalink:"/docs/table"},next:{title:"Expression Columns",permalink:"/docs/expressions"}},c={},u=[{value:"Querying data with <code>view()</code>",id:"querying-data-with-view",level:3},{value:"Group By",id:"group-by",level:2},{value:"Example",id:"example",level:4},{value:"Split By",id:"split-by",level:2},{value:"Example",id:"example-1",level:4},{value:"Aggregates",id:"aggregates",level:2},{value:"Example",id:"example-2",level:4},{value:"Columns",id:"columns",level:2},{value:"Example",id:"example-3",level:4},{value:"Sort",id:"sort",level:2},{value:"Example",id:"example-4",level:4},{value:"Filter",id:"filter",level:2},{value:"Example",id:"example-5",level:4},{value:"Expressions",id:"expressions",level:2},{value:"Example",id:"example-6",level:4},{value:"Flattening a <code>view()</code> into a <code>table()</code>",id:"flattening-a-view-into-a-table",level:2}],m={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The View is Perspective's query and serialization interface. It represents a\nquery on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),"'s dataset and is always created from an existing ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),"\ninstance via the ",(0,r.kt)("inlineCode",{parentName:"p"},"view()")," method with a set of\n",(0,r.kt)("a",{parentName:"p",href:"/docs/obj/perspective#module_perspective..table+view"},(0,r.kt)("inlineCode",{parentName:"a"},"View")," configuration parameters"),":"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const table = await perspective.table({\n    id: [1, 2, 3, 4],\n    name: ["a", "b", "c", "d"],\n});\n\nconst view = await table.view({ columns: ["name"] });\nconst json = await view.to_json();\n\nview.delete();\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'table = perspective.Table({\n  "id": [1, 2, 3, 4],\n  "name": ["a", "b", "c", "d"]\n});\n\nview = table.view(columns=["name"]);\narrow = view.to_arrow();\n')))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"View")," objects are immutable with respect to the arguments provided to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"view()")," method; to change these parameters, you must create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," on the\nsame ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),". However, each ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," is ",(0,r.kt)("em",{parentName:"p"},"live")," with respect to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),"'s data,\nand will (within a conflation window) update with the latest state as its parent\n",(0,r.kt)("inlineCode",{parentName:"p"},"Table")," updates, including incrementally recalculating all aggregates, pivots,\nfilters, etc. ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," query parameters are composable, in that each parameter\nworks independently ",(0,r.kt)("em",{parentName:"p"},"and")," in conjunction with each other, and there is no limit\nto the number of pivots, filters, etc. which can be applied."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Examples in this section are live \u2014 play around with each\n",(0,r.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>")," instance to see how different query parameters affect\nwhat you see!")),(0,r.kt)("h3",{id:"querying-data-with-view"},"Querying data with ",(0,r.kt)("inlineCode",{parentName:"h3"},"view()")),(0,r.kt)("p",null,"To query the table, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"view()")," on the table instance with an optional\nconfiguration object. A ",(0,r.kt)("inlineCode",{parentName:"p"},"table()")," can have as many ",(0,r.kt)("inlineCode",{parentName:"p"},"view()"),"s associated with it\nas you need - Perspective conserves memory by relying on a single ",(0,r.kt)("inlineCode",{parentName:"p"},"table()")," to\npower multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"view()"),"s concurrently:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({\n    columns: ["Sales"],\n    aggregates: { Sales: "sum" },\n    group_by: ["Region", "Country"],\n    filter: [["Category", "in", ["Furniture", "Technology"]]],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(\n  columns=["Sales"],\n  aggregates={"Sales": "sum"},\n  group_by=["Region", "Country"],\n  filter=[["Category", "in", ["Furniture", "Technology"]]]\n)\n')))),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/obj/perspective"},"View API documentation")," for more details."),(0,r.kt)("h2",{id:"group-by"},"Group By"),(0,r.kt)("p",null,"A group by ",(0,r.kt)("em",{parentName:"p"},"groups")," the dataset by the unique values of each column used as a\ngroup by - a close analogue in SQL to the ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," statement. The underlying\ndataset is aggregated to show the values belonging to each group, and a total\nrow is calculated for each group, showing the currently selected aggregated\nvalue (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"sum"),") of the column. Group by are useful for hierarchies,\ncategorizing data and attributing values, i.e. showing the number of units sold\nbased on State and City. In Perspective, group by are represented as an array of\nstring column names to pivot, are applied in the order provided; For example, a\ngroup by of ",(0,r.kt)("inlineCode",{parentName:"p"},'["State", "City", "Postal Code"]')," shows the values for each Postal\nCode, which are grouped by City, which are in turn grouped by State."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({ group_by: ["a", "c"] });\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(group_by=["a", "c"])\n')))),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n    group_by: ["State", "City"],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  group_by=["State", "City"]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{group_by:'["State", "City"]',columns:'["Sales", "Profit"]'})),(0,r.kt)("h2",{id:"split-by"},"Split By"),(0,r.kt)("p",null,"A split by ",(0,r.kt)("em",{parentName:"p"},"splits")," the dataset by the unique values of each column used as a\nsplit by. The underlying dataset is not aggregated, and a new column is created\nfor each unique value of the split by. Each newly created column contains the\nparts of the dataset that correspond to the column header, i.e. a ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," that\nhas ",(0,r.kt)("inlineCode",{parentName:"p"},'["State"]')," as its split by will have a new column for each state. In\nPerspective, Split By are represented as an array of string column names to\npivot:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({ split_by: ["a", "c"] });\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(split_by=["a", "c"])\n')))),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n    group_by: ["Category"],\n    split_by: ["Region"],\n    columns: ["Sales", "Profit"],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  group_by=["Category"],\n  split_by=["Region"],\n  columns=["Sales", "Profit"]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{group_by:'["Category"]',split_by:'["Region"]',columns:'["Sales", "Profit"]'})),(0,r.kt)("h2",{id:"aggregates"},"Aggregates"),(0,r.kt)("p",null,"Aggregates perform a calculation over an entire column, and are displayed when\none or more ",(0,r.kt)("a",{parentName:"p",href:"#row-pivots"},"Group By")," are applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"View"),". Aggregates can be\nspecified by the user, or Perspective will use the following sensible default\naggregates based on column type:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"sum" for ',(0,r.kt)("inlineCode",{parentName:"li"},"integer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"float")," columns"),(0,r.kt)("li",{parentName:"ul"},'"count" for all other columns')),(0,r.kt)("p",null,"Perspective provides a selection of aggregate functions that can be applied to\ncolumns in the ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," constructor using a dictionary of column name to aggregate\nfunction name:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({\n    aggregates: {\n        a: "avg",\n        b: "distinct count",\n    },\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(\n  aggregates={\n    "a": "avg",\n    "b": "distinct count"\n  }\n)\n')))),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n  aggregates: {"Sales": "avg", "Profit", "median"},\n  group_by: ["State", "City"],\n  columns: ["Sales", "Profit"]\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  aggregates={"Sales": "avg", "Profit", "median"},\n  group_by=["State", "City"],\n  columns=["Sales", "Profit"]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{aggregates:'{"Sales": "avg", "Profit": "median"}',group_by:'["State", "City"]',columns:'["Sales", "Profit"]'})),(0,r.kt)("h2",{id:"columns"},"Columns"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"columns")," property specifies which columns should be included in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"View"),"'s output. This allows users to show or hide a specific subset of columns,\nas well as control the order in which columns appear to the user. This is\nrepresented in Perspective as an array of string column names:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({\n    columns: ["a"],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(columns=["a"])\n')))),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n    columns: ["Sales", "Profit", "Segment"],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  columns=["Sales", "Profit", "Segment"]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{columns:'["Sales", "Profit"]'})),(0,r.kt)("h2",{id:"sort"},"Sort"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," property specifies columns on which the query should be sorted,\nanalogous to ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER BY")," in SQL. A column can be sorted regardless of its data\ntype, and sorts can be applied in ascending or descending order. Perspective\nrepresents ",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," as an array of arrays, with the values of each inner array\nbeing a string column name and a string sort direction. When ",(0,r.kt)("inlineCode",{parentName:"p"},"column-pivots")," are\napplied, the additional sort directions ",(0,r.kt)("inlineCode",{parentName:"p"},'"col asc"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"col desc"')," will\ndetermine the order of pivot columns groups."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({\n    sort: [["a", "asc"]],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(sort=[["a", "asc"]])\n')))),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n    sort: [["Sales", "desc"]],\n    columns: ["Sales", "Profit"],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  sort=[["Sales", "desc"]],\n  columns=["Sales", "Profit"]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{columns:'["Sales", "Profit"]',sort:'[["Sales", "desc"]]'})),(0,r.kt)("h2",{id:"filter"},"Filter"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," property specifies columns on which the query can be filtered,\nreturning rows that pass the specified filter condition. This is analogous to\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause in SQL. There is no limit on the number of columns where\n",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," is applied, but the resulting dataset is one that passes all the filter\nconditions, i.e. the filters are joined with an ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," condition."),(0,r.kt)("p",null,"Perspective represents ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," as an array of arrays, with the values of each\ninner array being a string column name, a string filter operator, and a filter\noperand in the type of the column:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({\n    filter: [["a", "<", 100]],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(filter=[["a", "<", 100]])\n')))),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n    columns: ["State", "Sales", "Profit"],\n    filter: [["State", "==", "Texas"]],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  columns=["Sales", "Profit"],\n  filter=[["State", "==", "Texas"]]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{columns:'["State", "Sales", "Profit"]',filter:'[["State","==","Texas"]]'})),(0,r.kt)("h2",{id:"expressions"},"Expressions"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"expressions")," property specifies ",(0,r.kt)("em",{parentName:"p"},"new")," columns in Perspective that are\ncreated using existing column values or arbitary scalar values defined within\nthe expression. In ",(0,r.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>"),', expressions are added using the "New\nColumn" button in the side panel.'),(0,r.kt)("p",null,"A custom name can be added to an expression by making the first line a comment:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const view = await table.view({\n    expressions: [\'"a" + "b"\'],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'view = table.view(expressions=[\'"a" + "b"\'])\n')))),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const elem = document.querySelector("perspective-viewer");\nawait elem.restore({\n    columns: ["new expression"],\n    expressions: [\'//new expression\\n"Sales" + "Profit" * 50 / sqrt("Sales")\'],\n});\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'widget = PerspectiveWidget()\nwidget.restore(\n  columns=["new_expression"],\n  expressions=["//new expression\\n\\"Sales\\" + \\"Profit\\" * 50 / sqrt(\\"Sales\\")"]\n)\n')))),(0,r.kt)("div",null,(0,r.kt)("perspective-viewer",{columns:'["new expression"]',expressions:'["//new expression\\n\\"Sales\\" + \\"Profit\\" * 50 / sqrt(\\"Sales\\")"]'})),(0,r.kt)("h2",{id:"flattening-a-view-into-a-table"},"Flattening a ",(0,r.kt)("inlineCode",{parentName:"h2"},"view()")," into a ",(0,r.kt)("inlineCode",{parentName:"h2"},"table()")),(0,r.kt)("p",null,"In Javascript, a ",(0,r.kt)("inlineCode",{parentName:"p"},"table()")," can be constructed on a ",(0,r.kt)("inlineCode",{parentName:"p"},"view()")," instance, which will\nreturn a new ",(0,r.kt)("inlineCode",{parentName:"p"},"table()")," based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"view()"),"'s dataset, and all future updates\nthat affect the ",(0,r.kt)("inlineCode",{parentName:"p"},"view()")," will be forwarded to the new ",(0,r.kt)("inlineCode",{parentName:"p"},"table()"),". This is\nparticularly useful for implementing a\n",(0,r.kt)("a",{parentName:"p",href:"/docs/server#clientserver-replicated"},"Client/Server Replicated")," design, by\nserializing the ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," to an arrow and setting up an ",(0,r.kt)("inlineCode",{parentName:"p"},"on_update")," callback:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const worker1 = perspective.worker();\nconst table = await worker.table(data);\nconst view = await table.view({ filter: [["State", "==", "Texas"]] });\nconst table2 = await worker.table(view);\n\ntable.update([{ State: "Texas", City: "Austin" }]);\n'))),(0,r.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'table = perspective.Table(data);\nview = table.view(filter=[["State", "==", "Texas"]])\ntable2 = perspective.Table(view.to_arrow());\n\ndef updater(port, delta):\n    table2.update(delta)\n\nview.on_update(updater, mode="Row")\n\ntable.update([{"State": "Texas", "City": "Austin"}])\n')))))}d.isMDXComponent=!0}}]);