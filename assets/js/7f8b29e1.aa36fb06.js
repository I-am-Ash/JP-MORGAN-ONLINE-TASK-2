"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[451],{5318:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return k}});var n=a(7378);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=i,k=c["".concat(o,".").concat(u)]||c[u]||m[u]||r;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1848:function(e,t,a){a.r(t),a.d(t,{assets:function(){return o},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return p}});var n=a(2685),i=(a(7378),a(5318));const r={id:"perspective-python",title:"perspective-python API"},l=void 0,s={unversionedId:"obj/perspective-python",id:"obj/perspective-python",title:"perspective-python API",description:"perspective.table contains Table and View, the data primitives of Perspective.",source:"@site/docs/obj/perspective-python.md",sourceDirName:"obj",slug:"/obj/perspective-python",permalink:"/docs/obj/perspective-python",draft:!1,tags:[],version:"current",frontMatter:{id:"perspective-python",title:"perspective-python API"},sidebar:"tutorialSidebar",previous:{title:"ExprTK Function Reference",permalink:"/docs/obj/perspective-viewer-exprtk"},next:{title:"Developer Guide",permalink:"/docs/development"}},o={},p=[{value:"Table",id:"table",level:2},{value:"View",id:"view",level:2},{value:"PerspectiveWidget",id:"perspectivewidget",level:2},{value:"<em>class</em> perspective.widget.widget.PerspectiveWidget(**kwargs: Any)",id:"class-perspectivewidgetwidgetperspectivewidgetkwargs-any",level:3},{value:"Examples",id:"examples",level:5},{value:"__init__(data, index=None, limit=None, server=False, client=True, **kwargs)",id:"__init__data-indexnone-limitnone-serverfalse-clienttrue-kwargs",level:4},{value:"Examples",id:"examples-1",level:5},{value:"load(data, **options)",id:"loaddata-options",level:4},{value:"update(data)",id:"updatedata",level:4},{value:"clear()",id:"clear",level:4},{value:"replace(data)",id:"replacedata",level:4},{value:"delete(delete_table=True)",id:"deletedelete_tabletrue",level:4},{value:"<em>class</em> perspective.viewer.viewer.PerspectiveViewer(**kwargs: Any)",id:"class-perspectiveviewerviewerperspectiveviewerkwargs-any",level:3},{value:"__init__(plugin=&#39;Datagrid&#39;, columns=None, group_by=None, split_by=None, aggregates=None, sort=None, filter=None, expressions=None, plugin_config=None, settings=True, theme=None, title=None)",id:"__init__plugindatagrid-columnsnone-group_bynone-split_bynone-aggregatesnone-sortnone-filternone-expressionsnone-plugin_confignone-settingstrue-themenone-titlenone",level:4},{value:"Examples",id:"examples-2",level:5},{value:"<em>property</em> table",id:"property-table",level:4},{value:"load(data, **options)",id:"loaddata-options-1",level:4},{value:"Examples",id:"examples-3",level:5},{value:"update(data)",id:"updatedata-1",level:4},{value:"clear()",id:"clear-1",level:4},{value:"replace(data)",id:"replacedata-1",level:4},{value:"save()",id:"save",level:4},{value:"restore(**kwargs)",id:"restorekwargs",level:4},{value:"reset()",id:"reset",level:4},{value:"Examples",id:"examples-4",level:5},{value:"delete(delete_table=True)",id:"deletedelete_tabletrue-1",level:4},{value:"Perspective Webserver Handlers",id:"perspective-webserver-handlers",level:2},{value:"<em>class</em> perspective.handlers.tornado.PerspectiveTornadoHandler(*args, **kwargs)",id:"class-perspectivehandlerstornadoperspectivetornadohandlerargs-kwargs",level:3},{value:"Examples",id:"examples-5",level:5},{value:"__init__(*args, **kwargs)",id:"__init__args-kwargs",level:4},{value:"on_message(*args, **kwargs)",id:"on_messageargs-kwargs",level:4},{value:"<em>async</em> write_message(message: str, binary: bool = False)",id:"async-write_messagemessage-str-binary-bool--false",level:4},{value:"<em>class</em> perspective.handlers.starlette.PerspectiveStarletteHandler(**kwargs)",id:"class-perspectivehandlersstarletteperspectivestarlettehandlerkwargs",level:3},{value:"Examples",id:"examples-6",level:5},{value:"__init__(**kwargs)",id:"__init__kwargs",level:4},{value:"<em>async</em> write_message(message: str, binary: bool = False)",id:"async-write_messagemessage-str-binary-bool--false-1",level:4},{value:"<em>class</em> perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler(**kwargs)",id:"class-perspectivehandlersaiohttpperspectiveaiohttphandlerkwargs",level:3},{value:"Examples",id:"examples-7",level:5},{value:"__init__(**kwargs)",id:"__init__kwargs-1",level:4},{value:"<em>async</em> write_message(message: str, binary: bool = False)",id:"async-write_messagemessage-str-binary-bool--false-2",level:4},{value:"Perspective Websocket Clients",id:"perspective-websocket-clients",level:2},{value:"PerspectiveManager",id:"perspectivemanager",level:2}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective.table")," contains ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),", the data primitives of Perspective."),(0,i.kt)("p",null,"For usage, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/md/python.html"},"Python User Guide"),"."),(0,i.kt)("h2",{id:"table"},"Table"),(0,i.kt)("h2",{id:"view"},"View"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective.core")," contains modules that implements ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," in various environments,\nmost notably ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," and the various Perspective web server handlers."),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.core")," defines several enums that provide easy access to aggregate options, different plugins, sort directions etc."),(0,i.kt)("p",null,"For usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," and the Perspective web server handlers, see the User Guide in the sidebar."),(0,i.kt)("h2",{id:"perspectivewidget"},"PerspectiveWidget"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," is a Perspective integration into ",(0,i.kt)("a",{parentName:"p",href:"%5Bhttps://jupyterlab.readthedocs.io/en/stable%5D(https://jupyterlab.readthedocs.io/en/stable)"},"JupyterLab"),"."),(0,i.kt)("h3",{id:"class-perspectivewidgetwidgetperspectivewidgetkwargs-any"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.widget.widget.PerspectiveWidget(","*","*","kwargs: Any)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"DOMWidget"),", ",(0,i.kt)("a",{parentName:"p",href:"#perspective.viewer.viewer.PerspectiveViewer"},(0,i.kt)("inlineCode",{parentName:"a"},"PerspectiveViewer"))),(0,i.kt)("p",null,":class","`","~perspective.PerspectiveWidget","`"," allows for Perspective to be used\nin the form of a Jupyter IPython widget."),(0,i.kt)("p",null,"Using perspective.Table, you can create a widget that extends the full\nfunctionality of perspective-viewer.  Changes on the viewer can be\nprogramatically set on the :class","`","~perspective.PerspectiveWidget","`"," instance,\nand state is maintained across page refreshes."),(0,i.kt)("h5",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from perspective import Table, PerspectiveWidget\n>>> data = {\n...     "a": [1, 2, 3],\n...     "b": [\n...         "2019/07/11 7:30PM",\n...         "2019/07/11 8:30PM",\n...         "2019/07/11 9:30PM"\n...     ]\n... }\n>>> tbl = Table(data, index="a")\n>>> widget = PerspectiveWidget(\n...     tbl,\n...     group_by=["a"],\n...     sort=[["b", "desc"]],\n...     filter=[["a", ">", 1]]\n... )\n>>> widget.sort\n[["b", "desc"]]\n>>> widget.sort.append(["a", "asc"])\n>>> widget.sort\n[["b", "desc"], ["a", "asc"]]\n>>> widget.update({"a": [4, 5]}) # Browser UI updates\n')),(0,i.kt)("h4",{id:"__init__data-indexnone-limitnone-serverfalse-clienttrue-kwargs"},"_","_","init_","_","(data, index=None, limit=None, server=False, client=True, ","*","*","kwargs)"),(0,i.kt)("p",null,"Initialize an instance of :class","`","~perspective.PerspectiveWidget","`","\nwith the given table/data and viewer configuration."),(0,i.kt)("p",null,"If a pivoted DataFrame or MultiIndex table is passed in, the widget\npreserves pivots and applies them.  See PerspectiveViewer.",(0,i.kt)("em",{parentName:"p"},"_","init"),"_"," for\narguments that transform the view shown in the widget."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"bytes"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 a\nperspective.Table instance, a perspective.View instance, or\na dataset to be loaded in the widget."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A column name to be used as the primary key.\nIgnored if server is True."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"limit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 A upper limit on the number of rows in the Table.\nCannot be set at the same time as index, ignored if server\nis True."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"server")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to run Perspective in \u201cserver-only\u201d\nmode, where the front-end client does not have its own Table,\nand instead reads all data and operations from Python."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"client")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 If True, convert the dataset into an Apache Arrow\nbinary and create the Table in Javascript using a copy of the\ndata. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),") \u2013 configuration options for the PerspectiveViewer,\nand Table constructor if data is a dataset.")))),(0,i.kt)("h5",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> widget = PerspectiveWidget(\n...     {"a": [1, 2, 3]},\n...     aggregates={"a": "avg"},\n...     group_by=["a"],\n...     sort=[["b", "desc"]],\n...     filter=[["a", ">", 1]],\n...     expressions=[""a" + 100"])\n')),(0,i.kt)("h4",{id:"loaddata-options"},"load(data, ","*","*","options)"),(0,i.kt)("p",null,"Load the widget with data. If running in client mode, this method\nserializes the data and calls the browser viewer\u2019s load method.\nOtherwise, it calls Viewer.load() using super()."),(0,i.kt)("h4",{id:"updatedata"},"update(data)"),(0,i.kt)("p",null,"Update the widget with new data. If running in client mode, this\nmethod serializes the data and calls the browser viewer\u2019s update\nmethod. Otherwise, it calls Viewer.update() using super()."),(0,i.kt)("h4",{id:"clear"},"clear()"),(0,i.kt)("p",null,"Clears the widget\u2019s underlying Table."),(0,i.kt)("p",null,"In client mode, clears the ","_","data attribute of the widget."),(0,i.kt)("h4",{id:"replacedata"},"replace(data)"),(0,i.kt)("p",null,"Replaces the widget\u2019s Table with new data conforming to the same\nschema. Does not clear user-set state. If in client mode, serializes\nthe data and sends it to the browser."),(0,i.kt)("h4",{id:"deletedelete_tabletrue"},"delete(delete_table=True)"),(0,i.kt)("p",null,"Delete the Widget\u2019s data and clears its internal state. If running in\nclient mode, sends the delete() command to the browser. Otherwise\ncalls delete on the underlying viewer."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"delete_table")," (bool) \u2013 whether the underlying Table will be\ndeleted. Defaults to True.")),(0,i.kt)("h3",{id:"class-perspectiveviewerviewerperspectiveviewerkwargs-any"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.viewer.viewer.PerspectiveViewer(","*","*","kwargs: Any)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveTraitlets"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"PerspectiveViewer wraps the perspective.Table API and exposes an API\naround creating views, loading data, and updating data."),(0,i.kt)("h4",{id:"__init__plugindatagrid-columnsnone-group_bynone-split_bynone-aggregatesnone-sortnone-filternone-expressionsnone-plugin_confignone-settingstrue-themenone-titlenone"},"_","_","init_","_","(plugin='Datagrid', columns=None, group_by=None, split_by=None, aggregates=None, sort=None, filter=None, expressions=None, plugin_config=None, settings=True, theme=None, title=None)"),(0,i.kt)("p",null,"Initialize an instance of PerspectiveViewer with the given viewer\nconfiguration.  Do not pass a Table or data into the constructor -\nuse the ",(0,i.kt)("a",{parentName:"p",href:"#perspective.viewer.viewer.PerspectiveViewer.load"},(0,i.kt)("inlineCode",{parentName:"a"},"load()"))," method to provide the viewer with data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"columns")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names to be\nvisible to the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"group_by")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names to\nuse as group by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"split_by")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names\nto use as split by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"aggregates")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A dictionary\nof column names to aggregate types, which specify aggregates\nfor individual columns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sort")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of lists,\neach list containing a column name and a sort direction\n(",(0,i.kt)("inlineCode",{parentName:"li"},"asc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"desc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"asc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"desc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col asc"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"col desc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col asc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col desc abs"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of lists,\neach list containing a column name, a filter comparator, and a\nvalue to filter by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"expressions")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of string\nexpressions which are applied to the view."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plugin")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Plugin"),") \u2013 Which plugin to\nselect by default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plugin_config")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),") \u2013 A configuration for the plugin, i.e.\nthe datagrid plugin or a chart plugin."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"settings")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether the perspective query settings\npanel should be open."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"theme")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 The color theme to use.")))),(0,i.kt)("h5",{id:"examples-2"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> viewer = PerspectiveViewer(\n...     aggregates={"a": "avg"},\n...     group_by=["a"],\n...     sort=[["b", "desc"]],\n...     filter=[["a", ">", 1]],\n...     expressions=[""a" + 100"]\n... )\n')),(0,i.kt)("h4",{id:"property-table"},(0,i.kt)("em",{parentName:"h4"},"property")," table"),(0,i.kt)("p",null,"Returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," under management by the viewer."),(0,i.kt)("h4",{id:"loaddata-options-1"},"load(data, ","*","*","options)"),(0,i.kt)("p",null,"Given a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.View"),",\nor data that can be handled by ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),", pass it to the\nviewer.  Like ","_","_","init_","_",", load accepts a perspective.Table, a dataset,\nor a schema. If running in client mode, load defers to the browser\u2019s\nPerspective engine. This means that loading Python-only datasets,\nespecially ones that cannot be serialized into JSON, may cause some\nissues."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"load()")," resets the state of the viewer :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If a ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Table")," has already been  loaded, ",(0,i.kt)("inlineCode",{parentName:"li"},"**options")," is\nignored as the options already set on the ",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," take precedence."),(0,i.kt)("li",{parentName:"ul"},"If a ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View")," is loaded, the options on the\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Table")," linked to the view take precedence.")),(0,i.kt)("p",null,"If data is passed in, a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," is automatically created\nby this method, and the options passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"**config")," are extended to\nthe new Table.  If the widget already has a dataset, and the new data\nhas different columns to the old one, then the widget state (pivots,\nsort, etc.) is cleared to prevent applying settings on columns that\ndon\u2019t exist."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"bytes"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 a\nperspective.Table instance, a perspective.View instance, or\na dataset to be loaded in the viewer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"name")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 An optional name to reference the table by so it can\nbe accessed from the front-end. If not provided, a name will\nbe generated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A column name to be used as the primary key.\nIgnored if a ",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"View")," is supplied."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"limit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 A upper limit on the number of rows in the Table.\nCannot be set at the same time as index. Ignored if a\n",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"View")," is supplied.")))),(0,i.kt)("h5",{id:"examples-3"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from perspective import Table, PerspectiveViewer\n>>> data = {"a": [1, 2, 3]}\n>>> tbl = Table(data)\n>>> viewer = PerspectiveViewer()\n>>> viewer.load(tbl)\n>>> viewer.load(data, index="a") # viewer state is reset\n>>> viewer2 = PerspectiveViewer()\n>>> viewer2.load(tbl.view())\n')),(0,i.kt)("h4",{id:"updatedata-1"},"update(data)"),(0,i.kt)("p",null,"Update the table under management by the viewer with new data.\nThis function follows the semantics of Table.update(), and will be\naffected by whether an index is set on the underlying table."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 the"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"table.")," (",(0,i.kt)("em",{parentName:"li"},"update data for the"),") \u2013 ")))),(0,i.kt)("h4",{id:"clear-1"},"clear()"),(0,i.kt)("p",null,"Clears the rows of this viewer\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("h4",{id:"replacedata-1"},"replace(data)"),(0,i.kt)("p",null,"Replaces the rows of this viewer\u2019s Table with new data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 new data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"schema.")," (",(0,i.kt)("em",{parentName:"li"},"to set into the table - must conform to the table's"),") \u2013 ")))),(0,i.kt)("h4",{id:"save"},"save()"),(0,i.kt)("p",null,"Get the viewer\u2019s attribute as a dictionary, symmetric with restore\nso that a viewer\u2019s configuration can be reproduced."),(0,i.kt)("h4",{id:"restorekwargs"},"restore(","*","*","kwargs)"),(0,i.kt)("p",null,"Restore a given set of attributes, passed as kwargs\n(e.g. dictionary). Symmetric with save so that a given viewer\u2019s\nconfiguration can be reproduced."),(0,i.kt)("h4",{id:"reset"},"reset()"),(0,i.kt)("p",null,"Resets the viewer\u2019s attributes and state, but does not delete or\nmodify the underlying Table."),(0,i.kt)("h5",{id:"examples-4"},"Examples"),(0,i.kt)("p",null,"widget = PerspectiveWidget(data, group_by=","[\u201cdate\u201d]",", plugin=Plugin.XBAR)\nwidget.reset()\nwidget.plugin  #"),(0,i.kt)("h4",{id:"deletedelete_tabletrue-1"},"delete(delete_table=True)"),(0,i.kt)("p",null,"Delete the Viewer\u2019s data and clears its internal state. If\n",(0,i.kt)("inlineCode",{parentName:"p"},"delete_table")," is True, the underlying perspective.Table and the\ninternal View object will be deleted."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"delete_table")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 whether the underlying Table will be\ndeleted. Defaults to True.")),(0,i.kt)("h2",{id:"perspective-webserver-handlers"},"Perspective Webserver Handlers"),(0,i.kt)("p",null,"Perspective provides several ready-made integrations with webserver libraries that interfaces seamlessly with\n",(0,i.kt)("inlineCode",{parentName:"p"},"@finos/perspective-viewer")," in Javascript."),(0,i.kt)("h3",{id:"class-perspectivehandlerstornadoperspectivetornadohandlerargs-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.handlers.tornado.PerspectiveTornadoHandler(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveHandlerBase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"WebSocketHandler")),(0,i.kt)("p",null,"PerspectiveTornadoHandler is a drop-in implementation of Perspective."),(0,i.kt)("p",null,"Use it inside Tornado routing to create a server-side Perspective that is\nready to receive websocket messages from the front-end perspective-viewer.\nBecause Tornado implements an event loop, this handler links Perspective\nwith IOLoop.current() in order to defer expensive operations until the\nnext free iteration of the event loop."),(0,i.kt)("p",null,"The Perspective client and server will automatically keep the Websocket\nalive without timing out."),(0,i.kt)("h5",{id:"examples-5"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> MANAGER = PerspectiveManager()\n>>> MANAGER.host_table("data_source_one", Table(\n...     pd.read_csv("superstore.csv")))\n>>> app = tornado.web.Application([\n...     (r"/", MainHandler),\n...     (r"/websocket", PerspectiveTornadoHandler, {\n...         "manager": MANAGER,\n...         "check_origin": True\n...     })\n... ])\n')),(0,i.kt)("h4",{id:"__init__args-kwargs"},"_","_","init_","_","(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Create a new instance of the PerspectiveHandlerBase with the\ngiven Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"manager")," (",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager"),") \u2013 A PerspectiveManager instance.\nMust be provided on initialization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(")," (",(0,i.kt)("em",{parentName:"li"},"check_origin"),") \u2013 obj","`","bool","`","): If True, all requests will be accepted\nregardless of origin. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Binary messages will not exceed this length\n(in bytes);  payloads above this limit will be chunked\nacross multiple messages. Defaults to 16_777_216 (16MB), and\nbe disabled entirely with None.")))),(0,i.kt)("h4",{id:"on_messageargs-kwargs"},"on_message(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"When the websocket receives a message, send it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"process"),"\nmethod of the PerspectiveManager with a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"post"),"\ncallback."),(0,i.kt)("h4",{id:"async-write_messagemessage-str-binary-bool--false"},(0,i.kt)("em",{parentName:"h4"},"async")," write_message(message: str, binary: bool = False)"),(0,i.kt)("p",null,"Websocket-specific implementation of writing a message to the websocket client.\nMust support writing either text or binary messages. Should only be called by this\nclass\u2019s post function, which handles all the perspective-specific logic"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"message")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 the message to write"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"binary")," (",(0,i.kt)("em",{parentName:"li"},"bool**,")," ",(0,i.kt)("em",{parentName:"li"},"optional"),") \u2013 whether or not to write as binary buffer")))),(0,i.kt)("h3",{id:"class-perspectivehandlersstarletteperspectivestarlettehandlerkwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.handlers.starlette.PerspectiveStarletteHandler(","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveHandlerBase")),(0,i.kt)("p",null,"PerspectiveStarletteHandler is a drop-in implementation of Perspective."),(0,i.kt)("p",null,"The Perspective client and server will automatically keep the Websocket\nalive without timing out."),(0,i.kt)("h5",{id:"examples-6"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> MANAGER = PerspectiveManager()\n>>> MANAGER.host_table("data_source_one", Table(\n...     pd.read_csv("superstore.csv")))\n>>> app = FastAPI()\n>>> async def endpoint(websocket: Websocket):\n...     handler = PerspectiveStarletteHandler(manager, websocket)\n...     await handler.run()\n... app.add_api_websocket_route(\'/websocket\', endpoint)\n')),(0,i.kt)("h4",{id:"__init__kwargs"},"_","_","init_","_","(","*","*","kwargs)"),(0,i.kt)("p",null,"Create a new instance of the PerspectiveHandlerBase with the\ngiven Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"manager")," (",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager"),") \u2013 A PerspectiveManager instance.\nMust be provided on initialization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(")," (",(0,i.kt)("em",{parentName:"li"},"check_origin"),") \u2013 obj","`","bool","`","): If True, all requests will be accepted\nregardless of origin. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Binary messages will not exceed this length\n(in bytes);  payloads above this limit will be chunked\nacross multiple messages. Defaults to 16_777_216 (16MB), and\nbe disabled entirely with None.")))),(0,i.kt)("h4",{id:"async-write_messagemessage-str-binary-bool--false-1"},(0,i.kt)("em",{parentName:"h4"},"async")," write_message(message: str, binary: bool = False)"),(0,i.kt)("p",null,"Websocket-specific implementation of writing a message to the websocket client.\nMust support writing either text or binary messages. Should only be called by this\nclass\u2019s post function, which handles all the perspective-specific logic"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"message")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 the message to write"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"binary")," (",(0,i.kt)("em",{parentName:"li"},"bool**,")," ",(0,i.kt)("em",{parentName:"li"},"optional"),") \u2013 whether or not to write as binary buffer")))),(0,i.kt)("h3",{id:"class-perspectivehandlersaiohttpperspectiveaiohttphandlerkwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler(","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveHandlerBase")),(0,i.kt)("p",null,"PerspectiveAIOHTTPHandler is a drop-in implementation of Perspective."),(0,i.kt)("p",null,"Use it inside AIOHTTP routing to create a server-side Perspective that is\nready to receive websocket messages from the front-end perspective-viewer."),(0,i.kt)("p",null,"The Perspective client and server will automatically keep the Websocket\nalive without timing out."),(0,i.kt)("h5",{id:"examples-7"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> manager = PerspectiveManager()\n>>> async def websocket_handler(request):\n...    handler = PerspectiveAIOHTTPHandler(manager=manager, request=request)\n...    await handler.run()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> app = web.Application()\n>>> app.router.add_get("/websocket", websocket_handler)\n')),(0,i.kt)("h4",{id:"__init__kwargs-1"},"_","_","init_","_","(","*","*","kwargs)"),(0,i.kt)("p",null,"Create a new instance of the PerspectiveHandlerBase with the\ngiven Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"manager")," (",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager"),") \u2013 A PerspectiveManager instance.\nMust be provided on initialization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(")," (",(0,i.kt)("em",{parentName:"li"},"check_origin"),") \u2013 obj","`","bool","`","): If True, all requests will be accepted\nregardless of origin. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Binary messages will not exceed this length\n(in bytes);  payloads above this limit will be chunked\nacross multiple messages. Defaults to 16_777_216 (16MB), and\nbe disabled entirely with None.")))),(0,i.kt)("h4",{id:"async-write_messagemessage-str-binary-bool--false-2"},(0,i.kt)("em",{parentName:"h4"},"async")," write_message(message: str, binary: bool = False)"),(0,i.kt)("p",null,"Websocket-specific implementation of writing a message to the websocket client.\nMust support writing either text or binary messages. Should only be called by this\nclass\u2019s post function, which handles all the perspective-specific logic"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"message")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 the message to write"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"binary")," (",(0,i.kt)("em",{parentName:"li"},"bool**,")," ",(0,i.kt)("em",{parentName:"li"},"optional"),") \u2013 whether or not to write as binary buffer")))),(0,i.kt)("h2",{id:"perspective-websocket-clients"},"Perspective Websocket Clients"),(0,i.kt)("p",null,"Perspective also provides several client interfaces to integrate with the above Perspective webserver handlers."),(0,i.kt)("h2",{id:"perspectivemanager"},"PerspectiveManager"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," implements a communication protocol between Perspective runtimes in different languages.\nThrough its ",(0,i.kt)("inlineCode",{parentName:"p"},"process()")," method, it allows runtimes to communicate instructions and interoperate."))}c.isMDXComponent=!0}}]);