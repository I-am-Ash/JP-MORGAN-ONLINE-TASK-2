"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[451],{5318:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7378);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),k=i,u=m["".concat(o,".").concat(k)]||m[k]||c[k]||l;return a?n.createElement(u,r(r({ref:t},d),{},{components:a})):n.createElement(u,r({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},1848:function(e,t,a){a.r(t),a.d(t,{assets:function(){return o},contentTitle:function(){return r},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var n=a(2685),i=(a(7378),a(5318));const l={id:"perspective-python",title:"perspective-python API"},r=void 0,s={unversionedId:"obj/perspective-python",id:"obj/perspective-python",title:"perspective-python API",description:"perspective.table contains Table and View, the data primitives of Perspective.",source:"@site/docs/obj/perspective-python.md",sourceDirName:"obj",slug:"/obj/perspective-python",permalink:"/docs/obj/perspective-python",draft:!1,tags:[],version:"current",frontMatter:{id:"perspective-python",title:"perspective-python API"},sidebar:"tutorialSidebar",previous:{title:"ExprTK Function Reference",permalink:"/docs/obj/perspective-viewer-exprtk"},next:{title:"Developer Guide",permalink:"/docs/development"}},o={},p=[{value:"Table",id:"table",level:2},{value:"<em>class</em> perspective.table.Table(data, limit=None, index=None)",id:"class-perspectivetabletabledata-limitnone-indexnone",level:3},{value:"__init__(data, limit=None, index=None)",id:"__init__data-limitnone-indexnone",level:4},{value:"make_port()",id:"make_port",level:4},{value:"remove_port(port_id)",id:"remove_portport_id",level:4},{value:"get_index()",id:"get_index",level:4},{value:"get_limit()",id:"get_limit",level:4},{value:"get_num_views()",id:"get_num_views",level:4},{value:"clear()",id:"clear",level:4},{value:"replace(data)",id:"replacedata",level:4},{value:"size()",id:"size",level:4},{value:"num_rows()",id:"num_rows",level:4},{value:"num_columns()",id:"num_columns",level:4},{value:"schema(as_string=False)",id:"schemaas_stringfalse",level:4},{value:"validate_expressions(expressions, as_string=False)",id:"validate_expressionsexpressions-as_stringfalse",level:4},{value:"columns()",id:"columns",level:4},{value:"is_valid_filter(filter)",id:"is_valid_filterfilter",level:4},{value:"update(data, port_id=0)",id:"updatedata-port_id0",level:4},{value:"Examples",id:"examples",level:5},{value:"remove(pkeys, port_id=0)",id:"removepkeys-port_id0",level:4},{value:"Examples",id:"examples-1",level:5},{value:"view(columns=None, group_by=None, split_by=None, aggregates=None, sort=None, filter=None, expressions=None)",id:"viewcolumnsnone-group_bynone-split_bynone-aggregatesnone-sortnone-filternone-expressionsnone",level:4},{value:"Examples",id:"examples-2",level:5},{value:"on_delete(callback)",id:"on_deletecallback",level:4},{value:"Examples",id:"examples-3",level:5},{value:"remove_delete(callback)",id:"remove_deletecallback",level:4},{value:"Examples",id:"examples-4",level:5},{value:"delete()",id:"delete",level:4},{value:"View",id:"view",level:2},{value:"<em>class</em> perspective.table.view.View(Table, **kwargs)",id:"class-perspectivetableviewviewtable-kwargs",level:3},{value:"get_config()",id:"get_config",level:4},{value:"sides()",id:"sides",level:4},{value:"get_min_max(colname)",id:"get_min_maxcolname",level:4},{value:"num_rows()",id:"num_rows-1",level:4},{value:"num_columns()",id:"num_columns-1",level:4},{value:"dimensions()",id:"dimensions",level:4},{value:"get_row_expanded(idx)",id:"get_row_expandedidx",level:4},{value:"expand(idx)",id:"expandidx",level:4},{value:"collapse(idx)",id:"collapseidx",level:4},{value:"set_depth(depth)",id:"set_depthdepth",level:4},{value:"column_paths()",id:"column_paths",level:4},{value:"schema(as_string=False)",id:"schemaas_stringfalse-1",level:4},{value:"expression_schema(as_string=False)",id:"expression_schemaas_stringfalse",level:4},{value:"on_update(callback, mode=None)",id:"on_updatecallback-modenone",level:4},{value:"Examples",id:"examples-5",level:5},{value:"remove_update(callback)",id:"remove_updatecallback",level:4},{value:"Examples",id:"examples-6",level:5},{value:"on_delete(callback)",id:"on_deletecallback-1",level:4},{value:"Examples",id:"examples-7",level:5},{value:"delete()",id:"delete-1",level:4},{value:"Examples",id:"examples-8",level:5},{value:"remove_delete(callback)",id:"remove_deletecallback-1",level:4},{value:"Examples",id:"examples-9",level:5},{value:"to_records(**kwargs)",id:"to_recordskwargs",level:4},{value:"to_columns_string(**kwargs)",id:"to_columns_stringkwargs",level:4},{value:"to_dict(**kwargs)",id:"to_dictkwargs",level:4},{value:"to_numpy(**options)",id:"to_numpyoptions",level:4},{value:"to_df(**options)",id:"to_dfoptions",level:4},{value:"to_csv(**kwargs)",id:"to_csvkwargs",level:4},{value:"to_json(**kwargs)",id:"to_jsonkwargs",level:4},{value:"to_columns(**kwargs)",id:"to_columnskwargs",level:4},{value:"perspective.set_threadpool_size(nthreads)",id:"perspectiveset_threadpool_sizenthreads",level:3},{value:"PerspectiveWidget",id:"perspectivewidget",level:2},{value:"<em>class</em> perspective.widget.widget.PerspectiveWidget(**kwargs: Any)",id:"class-perspectivewidgetwidgetperspectivewidgetkwargs-any",level:3},{value:"Examples",id:"examples-10",level:5},{value:"__init__(data, index=None, limit=None, server=False, client=False, **kwargs)",id:"__init__data-indexnone-limitnone-serverfalse-clientfalse-kwargs",level:4},{value:"Examples",id:"examples-11",level:5},{value:"load(data, **options)",id:"loaddata-options",level:4},{value:"update(data)",id:"updatedata",level:4},{value:"clear()",id:"clear-1",level:4},{value:"replace(data)",id:"replacedata-1",level:4},{value:"delete(delete_table=True)",id:"deletedelete_tabletrue",level:4},{value:"<em>class</em> perspective.viewer.viewer.PerspectiveViewer(**kwargs: Any)",id:"class-perspectiveviewerviewerperspectiveviewerkwargs-any",level:3},{value:"__init__(plugin=&#39;Datagrid&#39;, columns=None, group_by=None, split_by=None, aggregates=None, sort=None, filter=None, expressions=None, plugin_config=None, settings=True, theme=None, title=None)",id:"__init__plugindatagrid-columnsnone-group_bynone-split_bynone-aggregatesnone-sortnone-filternone-expressionsnone-plugin_confignone-settingstrue-themenone-titlenone",level:4},{value:"Examples",id:"examples-12",level:5},{value:"<em>property</em> table",id:"property-table",level:4},{value:"load(data, **options)",id:"loaddata-options-1",level:4},{value:"Examples",id:"examples-13",level:5},{value:"update(data)",id:"updatedata-1",level:4},{value:"clear()",id:"clear-2",level:4},{value:"replace(data)",id:"replacedata-2",level:4},{value:"save()",id:"save",level:4},{value:"restore(**kwargs)",id:"restorekwargs",level:4},{value:"reset()",id:"reset",level:4},{value:"Examples",id:"examples-14",level:5},{value:"delete(delete_table=True)",id:"deletedelete_tabletrue-1",level:4},{value:"Perspective Webserver Handlers",id:"perspective-webserver-handlers",level:2},{value:"<em>class</em> perspective.handlers.tornado.PerspectiveTornadoHandler(*args, **kwargs)",id:"class-perspectivehandlerstornadoperspectivetornadohandlerargs-kwargs",level:3},{value:"Examples",id:"examples-15",level:5},{value:"__init__(*args, **kwargs)",id:"__init__args-kwargs",level:4},{value:"on_message(*args, **kwargs)",id:"on_messageargs-kwargs",level:4},{value:"<em>async</em> write_message(message: str, binary: bool = False)",id:"async-write_messagemessage-str-binary-bool--false",level:4},{value:"<em>class</em> perspective.handlers.starlette.PerspectiveStarletteHandler(**kwargs)",id:"class-perspectivehandlersstarletteperspectivestarlettehandlerkwargs",level:3},{value:"Examples",id:"examples-16",level:5},{value:"__init__(**kwargs)",id:"__init__kwargs",level:4},{value:"<em>async</em> write_message(message: str, binary: bool = False)",id:"async-write_messagemessage-str-binary-bool--false-1",level:4},{value:"<em>class</em> perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler(**kwargs)",id:"class-perspectivehandlersaiohttpperspectiveaiohttphandlerkwargs",level:3},{value:"Examples",id:"examples-17",level:5},{value:"__init__(**kwargs)",id:"__init__kwargs-1",level:4},{value:"<em>async</em> write_message(message: str, binary: bool = False)",id:"async-write_messagemessage-str-binary-bool--false-2",level:4},{value:"Perspective Websocket Clients",id:"perspective-websocket-clients",level:2},{value:"<em>class</em> perspective.client.tornado.TornadoPeriodic(*args, **kwargs)",id:"class-perspectiveclienttornadotornadoperiodicargs-kwargs",level:3},{value:"<em>class</em> perspective.client.tornado.PerspectiveTornadoWebsocketConnection",id:"class-perspectiveclienttornadoperspectivetornadowebsocketconnection",level:3},{value:"<em>async</em> perspective.client.tornado.websocket(url)",id:"async-perspectiveclienttornadowebsocketurl",level:3},{value:"<em>class</em> perspective.client.aiohttp.AIOHTTPPeriodic(*args, **kwargs)",id:"class-perspectiveclientaiohttpaiohttpperiodicargs-kwargs",level:3},{value:"<em>class</em> perspective.client.aiohttp.PerspectiveAIOHTTPWebsocketConnection(session=None)",id:"class-perspectiveclientaiohttpperspectiveaiohttpwebsocketconnectionsessionnone",level:3},{value:"<em>async</em> perspective.client.aiohttp.websocket(url, session=None)",id:"async-perspectiveclientaiohttpwebsocketurl-sessionnone",level:3},{value:"PerspectiveManager",id:"perspectivemanager",level:2},{value:"<em>class</em> perspective.manager.manager.PerspectiveManager(lock=False)",id:"class-perspectivemanagermanagerperspectivemanagerlockfalse",level:3},{value:"__init__(lock=False)",id:"__init__lockfalse",level:4},{value:"lock()",id:"lock",level:4},{value:"unlock()",id:"unlock",level:4},{value:"host(item, name=None)",id:"hostitem-namenone",level:4},{value:"host_table(name, table)",id:"host_tablename-table",level:4},{value:"get_table(name)",id:"get_tablename",level:4},{value:"get_table_names()",id:"get_table_names",level:4},{value:"call_loop(f, *args, **kwargs)",id:"call_loopf-args-kwargs",level:4},{value:"set_loop_callback(loop_callback, *args, **kwargs)",id:"set_loop_callbackloop_callback-args-kwargs",level:4},{value:"perspective.manager.session.random()",id:"perspectivemanagersessionrandom",level:3},{value:"<em>class</em> perspective.manager.session.PerspectiveSession(manager)",id:"class-perspectivemanagersessionperspectivesessionmanager",level:3},{value:"__init__(manager)",id:"__init__manager",level:4},{value:"process(message, post_callback)",id:"processmessage-post_callback",level:4},{value:"close()",id:"close",level:4}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective.table")," contains ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),", the data primitives of Perspective."),(0,i.kt)("p",null,"For usage, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/md/python.html"},"Python User Guide"),"."),(0,i.kt)("h2",{id:"table"},"Table"),(0,i.kt)("h3",{id:"class-perspectivetabletabledata-limitnone-indexnone"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.table.Table(data, limit=None, index=None)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("h4",{id:"__init__data-limitnone-indexnone"},"_","_","init_","_","(data, limit=None, index=None)"),(0,i.kt)("p",null,"Construct a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," using the provided data or\nschema and optional configuration dictionary."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Table")," instances are immutable - column names and\ndata types cannot be changed after creation. If a schema is provided,\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," will be empty.  Subsequent updates MUST\nconform to the column names and data types provided in the schema."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 Data or\nschema which initializes the ",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A string column name to use as the\n",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," primary key."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"limit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 The maximum number of rows the\n",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," should have.  Cannot be set at the\nsame time as ",(0,i.kt)("inlineCode",{parentName:"li"},"index"),". Updates past the limit will begin\nwriting at row 0.")))),(0,i.kt)("h4",{id:"make_port"},"make_port()"),(0,i.kt)("p",null,"Create a new input port on the underlying gnode, and return an\n",(0,i.kt)("inlineCode",{parentName:"p"},"int")," containing the ID of the new input port."),(0,i.kt)("h4",{id:"remove_portport_id"},"remove_port(port_id)"),(0,i.kt)("p",null,"Remove the specified port from the underlying gnode."),(0,i.kt)("h4",{id:"get_index"},"get_index()"),(0,i.kt)("p",null,"Returns the Table\u2019s index column, or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if an index is not\nspecified by the user."),(0,i.kt)("h4",{id:"get_limit"},"get_limit()"),(0,i.kt)("p",null,"Returns the Table\u2019s limit, or ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," if an index is not\nspecified by the user."),(0,i.kt)("h4",{id:"get_num_views"},"get_num_views()"),(0,i.kt)("p",null,"Returns the number of views associated to this table."),(0,i.kt)("h4",{id:"clear"},"clear()"),(0,i.kt)("p",null,"Removes all the rows in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", but\npreserves everything else including the schema and any callbacks or\nregistered ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("h4",{id:"replacedata"},"replace(data)"),(0,i.kt)("p",null,"Replaces all rows in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," with the new\ndata that conforms to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," schema."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 New data\nthat will be filled into the ",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),".")),(0,i.kt)("h4",{id:"size"},"size()"),(0,i.kt)("p",null,"Returns the row count of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("h4",{id:"num_rows"},"num_rows()"),(0,i.kt)("p",null,"Returns the row count of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("h4",{id:"num_columns"},"num_columns()"),(0,i.kt)("p",null,"Returns the column count of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("h4",{id:"schemaas_stringfalse"},"schema(as_string=False)"),(0,i.kt)("p",null,"Returns the schema of this ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"dict"),"\nmapping of string column names to python data types."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("strong",{parentName:"li"},"as_string")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 returns the data types as string\nrepresentations, if True"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA key-value mapping of column names to data types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"validate_expressionsexpressions-as_stringfalse"},"validate_expressions(expressions, as_string=False)"),(0,i.kt)("p",null,"Returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," with two keys: \u201cexpression_schema\u201d, which is\na schema containing the column names and data types for each valid\nexpression in ",(0,i.kt)("inlineCode",{parentName:"p"},"expressions"),", and \u201cerrors\u201d, which is a dict of\nexpressions to error objects that contain additional metadata:\nerror_message, line, and column."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"expressions")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list"),") \u2013 A list of string expressions to validate\nand create a schema from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("strong",{parentName:"li"},"as_string")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 If True, returns the data types as string\nrepresentations so they can be serialized.")),(0,i.kt)("h4",{id:"columns"},"columns()"),(0,i.kt)("p",null,"Returns the column names of this ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\na list of string column names"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"list"))),(0,i.kt)("h4",{id:"is_valid_filterfilter"},"is_valid_filter(filter)"),(0,i.kt)("p",null,"Tests whether a given filter expression string is valid, e.g. that\nthe filter term is not None or an unparsable date/datetime.  null/\nnot null operators don\u2019t need a comparison value."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"filter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"string"),") \u2013 The filter expression to validate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nWhether this filter is valid."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"bool"))),(0,i.kt)("h4",{id:"updatedata-port_id0"},"update(data, port_id=0)"),(0,i.kt)("p",null,"Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," with new data."),(0,i.kt)("p",null,"Updates on ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," without an explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),"\nare treated as appends.  Updates on ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," with\nan explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," should have the index as part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),"\nparam, as this instructs the engine to locate the indexed row and write\ninto it.  If an index is not provided, the update is treated as an\nappend."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 The data\nwith which to update the ",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),".")),(0,i.kt)("h5",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> tbl = Table({"a": [1, 2, 3], "b": ["a", "b", "c"]}, index="a")\n>>> tbl.update({"a": [2, 3], "b": ["a", "a"]})\n>>> tbl.view().to_dict()\n{"a": [1, 2, 3], "b": ["a", "a", "a"]}\n')),(0,i.kt)("h4",{id:"removepkeys-port_id0"},"remove(pkeys, port_id=0)"),(0,i.kt)("p",null,"Removes the rows with the primary keys specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"pkeys"),"."),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," does not have an index, ",(0,i.kt)("inlineCode",{parentName:"p"},"remove()"),"\nhas no effect.  Removes propagate to views derived from the table."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"pkeys")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list"),") \u2013 a list of primary keys to indicate the rows\nthat should be removed.")),(0,i.kt)("h5",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> tbl = Table({"a": [1, 2, 3]}, index="a")\n>>> tbl.remove([2, 3])\n>>> tbl.view().to_records()\n[{"a": 1}]\n')),(0,i.kt)("h4",{id:"viewcolumnsnone-group_bynone-split_bynone-aggregatesnone-sortnone-filternone-expressionsnone"},"view(columns=None, group_by=None, split_by=None, aggregates=None, sort=None, filter=None, expressions=None)"),(0,i.kt)("p",null,"Create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," from this\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," via the supplied keyword arguments."),(0,i.kt)("p",null,"A View is an immutable set of transformations applied to the data stored\nin a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", which can be used for querying,\npivoting, aggregating, sorting, and filtering."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"columns")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names to be\nvisible to the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"group_by")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names to\nuse as group by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"split_by")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names\nto use as split by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"aggregates")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A dictionary\nof column names to aggregate types, which specify aggregates\nfor individual columns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sort")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of lists,\neach list containing a column name and a sort direction\n(",(0,i.kt)("inlineCode",{parentName:"li"},"asc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"desc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"asc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"desc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col asc"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"col desc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col asc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col desc abs"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of lists,\neach list containing a column name, a filter comparator, and a\nvalue to filter by."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA new ",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"\n: instance bound to this ",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"View"))),(0,i.kt)("h5",{id:"examples-2"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> tbl = Table({"a": [1, 2, 3]})\n>>> view = tbl.view(filter=[["a", "==", 1]]\n>>> view.to_dict()\n>>> {"a": [1]}\n')),(0,i.kt)("h4",{id:"on_deletecallback"},"on_delete(callback)"),(0,i.kt)("p",null,"Register a callback to be invoked when the\n",(0,i.kt)("inlineCode",{parentName:"p"},"delete()")," method is called on this\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"callback")," (",(0,i.kt)("inlineCode",{parentName:"li"},"func"),") \u2013 A callback function to invoke on delete.")),(0,i.kt)("h5",{id:"examples-3"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> def deleter():\n...     print("Delete called!")\n>>> table.on_delete(deleter)\n>>> table.delete()\n>>> Delete called!\n')),(0,i.kt)("h4",{id:"remove_deletecallback"},"remove_delete(callback)"),(0,i.kt)("p",null,"De-register the supplied callback from the\n",(0,i.kt)("inlineCode",{parentName:"p"},"delete()")," event for this\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")),(0,i.kt)("h5",{id:"examples-4"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> def deleter():\n...     print("Delete called!")\n>>> table.on_delete(deleter)\n>>> table.remove_delete(deleter)\n>>> table.delete()\n')),(0,i.kt)("h4",{id:"delete"},"delete()"),(0,i.kt)("p",null,"Delete this ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and clean up associated\nresources, assuming it has no ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," instances\nregistered to it (which must be deleted first)."),(0,i.kt)("h2",{id:"view"},"View"),(0,i.kt)("h3",{id:"class-perspectivetableviewviewtable-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.table.view.View(Table, ","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," object represents a specific transform\n(pivot, filter, sort, etc) configuration on an underlying\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),".  ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," objects\ncannot be directly instantiated - they must be derived from an existing\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," via the ",(0,i.kt)("inlineCode",{parentName:"p"},"view()"),"\nmethod."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"View")," instances receive all updates from the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," from which they are derived, and can be\nserialized (via ",(0,i.kt)("inlineCode",{parentName:"p"},"to_*")," methods) or trigger a callback when it is updated.\n",(0,i.kt)("inlineCode",{parentName:"p"},"View")," objects will remain in memory and actively\nprocess updates until ",(0,i.kt)("inlineCode",{parentName:"p"},"delete()")," method is called."),(0,i.kt)("h4",{id:"get_config"},"get_config()"),(0,i.kt)("p",null,"Returns a copy of the immutable configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"kwargs")," from which\nthis ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," was instantiated."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),(0,i.kt)("inlineCode",{parentName:"li"},"kwargs")," supplied to the\n: ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Table.view()")," method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"sides"},"sides()"),(0,i.kt)("p",null,"An integer representing the # of hierarchial axis on this\n",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("p",null,"0 - Neither ",(0,i.kt)("inlineCode",{parentName:"p"},"group_by")," nor ",(0,i.kt)("inlineCode",{parentName:"p"},"split_by")," properties are set."),(0,i.kt)("p",null,"1 - ",(0,i.kt)("inlineCode",{parentName:"p"},"group_by")," is set."),(0,i.kt)("p",null,"2 - ",(0,i.kt)("inlineCode",{parentName:"p"},"split_by")," is set (and also maybe ",(0,i.kt)("inlineCode",{parentName:"p"},"group_by"),")."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\n0 <= N <= 2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"int"))),(0,i.kt)("h4",{id:"get_min_maxcolname"},"get_min_max(colname)"),(0,i.kt)("p",null,"Calculates the ","[min, max]"," of the leaf nodes of a column colname."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"colname")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 The name of the column to calcualte range for."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),(0,i.kt)("inlineCode",{parentName:"li"},"list")," of 2 elements, the min and max of the")),(0,i.kt)("h4",{id:"num_rows-1"},"num_rows()"),(0,i.kt)("p",null,"The number of aggregated rows in the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("p",null,"This count includes the total aggregate rows for all ",(0,i.kt)("inlineCode",{parentName:"p"},"group_by"),"\ndepth levels, and can also be affected by any applied ",(0,i.kt)("inlineCode",{parentName:"p"},"filter"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nNumber of rows."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"int"))),(0,i.kt)("h4",{id:"num_columns-1"},"num_columns()"),(0,i.kt)("p",null,"The number of aggregated columns in the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),".\nThis is affected by the ",(0,i.kt)("inlineCode",{parentName:"p"},"split_by")," that are applied to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nNumber of columns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"int"))),(0,i.kt)("h4",{id:"dimensions"},"dimensions()"),(0,i.kt)("p",null,"The View and Table aggregated dimensions in the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA dictionary with 4 fields indicating the dimensions of\n: both the ",(0,i.kt)("inlineCode",{parentName:"li"},"View")," and underlying\n",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," objects: \u201cnum_view_rows\u201d,\n\u201cnum_view_columns\u201d, \u201cnum_table_rows\u201d, \u201cnum_table_columns\u201d"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"get_row_expandedidx"},"get_row_expanded(idx)"),(0,i.kt)("p",null,"Returns whether row at idx is expanded or collapsed."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nIs this row expanded?"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"bool"))),(0,i.kt)("h4",{id:"expandidx"},"expand(idx)"),(0,i.kt)("p",null,"Expands the row at \u2018idx\u2019, i.e. displaying its leaf rows."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"idx")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Row index to expand.")),(0,i.kt)("h4",{id:"collapseidx"},"collapse(idx)"),(0,i.kt)("p",null,"Collapses the row at \u2018idx\u2019, i.e. hiding its leaf rows."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"idx")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Row index to collapse.")),(0,i.kt)("h4",{id:"set_depthdepth"},"set_depth(depth)"),(0,i.kt)("p",null,"Sets the expansion depth of the pivot tree."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"depth")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Depth to collapse all nodes to, which\nmay be no greater then the length of the ",(0,i.kt)("inlineCode",{parentName:"li"},"group_by"),"\nproperty.")),(0,i.kt)("h4",{id:"column_paths"},"column_paths()"),(0,i.kt)("p",null,"Returns the names of the columns as they show in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"View"),", i.e. the hierarchial columns when\n",(0,i.kt)("inlineCode",{parentName:"p"},"split_by")," is applied."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nobj","`","str","`",": Aggregated column names."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"list")," of")),(0,i.kt)("h4",{id:"schemaas_stringfalse-1"},"schema(as_string=False)"),(0,i.kt)("p",null,"The schema of this ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),", which is a key-value\nmap that contains the column names and their Python data types."),(0,i.kt)("p",null,"If the columns are aggregated, their aggregated types will be shown\nreturned instead."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("strong",{parentName:"li"},"as_string")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 returns data types as string\nrepresentations, if ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA map of ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," column name to ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," or\n: ",(0,i.kt)("inlineCode",{parentName:"li"},"type"),", depending on the value of ",(0,i.kt)("inlineCode",{parentName:"li"},"as_string")," kwarg."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"expression_schemaas_stringfalse"},"expression_schema(as_string=False)"),(0,i.kt)("p",null,"Returns the expression schema of this ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),",\nwhich is a key-value map that contains the expressions and their\nPython data types."),(0,i.kt)("p",null,"If the columns are aggregated, their aggregated types will be returned\ninstead."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("strong",{parentName:"li"},"as_string")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 returns data types as string\nrepresentations, if ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA map of ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," column name to ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," or\n: ",(0,i.kt)("inlineCode",{parentName:"li"},"type"),", depending on the value of ",(0,i.kt)("inlineCode",{parentName:"li"},"as_string")," kwarg."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"on_updatecallback-modenone"},"on_update(callback, mode=None)"),(0,i.kt)("p",null,"Add a callback to be fired when ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table.update()")," is\ncalled on the parent ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("p",null,"Multiple callbacks can be set through calling ",(0,i.kt)("inlineCode",{parentName:"p"},"on_update")," multiple\ntimes, and will be called in the order they are set. Callback must be a\ncallable function that takes exactly 1 or 2 parameters, depending on\nwhether on_update is called with mode=\u201drow\u201d. The first parameter is\nalways port_id, an ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," that indicates which input port the\nupdate comes from. A RuntimeError will be thrown if the callback\nhas mis-configured parameters."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"callback")," (",(0,i.kt)("inlineCode",{parentName:"li"},"callable"),") \u2013 a callable function reference that will\nbe called when ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Table.update()")," is called."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"mode")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 if set to \u201crow\u201d, the callback will be passed\nan Arrow-serialized dataset of the rows that were updated.\nDefaults to \u201cnone\u201d.")))),(0,i.kt)("h5",{id:"examples-5"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> def updater(port_id):\n...     print("Update fired on port", port_id)\n>>> def updater_with_delta(port_id, delta):\n...     print("Update on port", port_id, "delta len:", len(delta)))\n>>> view.on_update(updater)\n>>> view.on_update(updater, mode="row")\n>>> table.update({"a": [1]})\'\n>>> Update fired on port 0\n>>> Update on port 0 delta len: 64\n')),(0,i.kt)("h4",{id:"remove_updatecallback"},"remove_update(callback)"),(0,i.kt)("p",null,"Given a callback function, remove it from the list of callbacks."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"callback")," (",(0,i.kt)("inlineCode",{parentName:"li"},"func"),") \u2013 a function reference that will be removed.")),(0,i.kt)("h5",{id:"examples-6"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> table = perspective.Table(data)\n>>> view = table.view()\n>>> view2 = table.view()\n>>> def callback():\n...     print("called!")\n>>> view.on_update(callback)\n>>> view2.on_update(callback)\n>>> table.update(new_data)\ncalled!\n>>> view2.remove_update(callback)\n>>> table.update(new_data) # callback removed and will not fire\n')),(0,i.kt)("h4",{id:"on_deletecallback-1"},"on_delete(callback)"),(0,i.kt)("p",null,"Set a callback to be run when the ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.View.delete()"),"\nmethod is called on this ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"callback")," (",(0,i.kt)("inlineCode",{parentName:"li"},"callable"),") \u2013 A callback to run after\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.delete()")," method has been called.")),(0,i.kt)("h5",{id:"examples-7"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> def deleter():\n>>>     print("Delete called!")\n>>> view.on_delete(deleter)\n>>> view.delete()\n>>> Delete called!\n')),(0,i.kt)("h4",{id:"delete-1"},"delete()"),(0,i.kt)("p",null,"Delete the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," and clean up all associated\ncallbacks."),(0,i.kt)("p",null,"This method must be called to clean up callbacks used by the\n",(0,i.kt)("inlineCode",{parentName:"p"},"View"),", as well as allow for deletion of the\nunderlying ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("h5",{id:"examples-8"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> table = perspective.Table(data)\n>>> view = table.view()\n>>> view.delete()\n")),(0,i.kt)("h4",{id:"remove_deletecallback-1"},"remove_delete(callback)"),(0,i.kt)("p",null,"Remove the delete callback associated with this\n",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"callback")," (",(0,i.kt)("inlineCode",{parentName:"li"},"callable"),") \u2013 A reference to a callable function that\nwill be removed from delete callbacks.")),(0,i.kt)("h5",{id:"examples-9"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> table = perspective.Table(data)\n>>> view = table.view()\n>>> view2 = table.view()\n>>> def callback():\n...     print("called!")\n>>> view.on_delete(callback)\n>>> view2.on_delete(callback)\n>>> view.delete()\ncalled!\n>>> view2.remove_delete(callback)\n>>> view2.delete() # callback removed and will not fire\n')),(0,i.kt)("h4",{id:"to_recordskwargs"},"to_records(","*","*","kwargs)"),(0,i.kt)("p",null,"Serialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"\u2019s dataset into a ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),"\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," containing each row."),(0,i.kt)("p",null,"By default, the entire dataset is returned, though this can be windowed\nvia ",(0,i.kt)("inlineCode",{parentName:"p"},"kwargs"),".  When ",(0,i.kt)("inlineCode",{parentName:"p"},"group_by")," are applied, a ",(0,i.kt)("inlineCode",{parentName:"p"},"__ROW_PATH__"),"\ncolumn name will be generated in addition to the applied ",(0,i.kt)("inlineCode",{parentName:"p"},"columns"),".\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"split_by")," are applied, column names will be qualified\nwith their column group name."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of ",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),", where each dict\n: represents a row of the current state of the\n",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"to_columns_stringkwargs"},"to_columns_string(","*","*","kwargs)"),(0,i.kt)("h4",{id:"to_dictkwargs"},"to_dict(","*","*","kwargs)"),(0,i.kt)("p",null,"Serialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"\u2019s dataset into a ",(0,i.kt)("inlineCode",{parentName:"p"},"dict"),"\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," keys and ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," values.  Each key is a column name,\nand the associated value is the column\u2019s data packed into a ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),".\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," is aggregated, the aggregated dataset\nwill be returned."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA dictionary with string keys and list values, where\n: key = column name and value = column values."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"to_numpyoptions"},"to_numpy(","*","*","options)"),(0,i.kt)("p",null,"Serialize the view\u2019s dataset into a ",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," keys\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"numpy.array")," values.  Each key is a column name, and the\nassociated value is the column\u2019s data packed into a numpy array."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA dictionary with string keys\n: and numpy array values, where key = column name and\nvalue = column values."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"numpy.array"))),(0,i.kt)("h4",{id:"to_dfoptions"},"to_df(","*","*","options)"),(0,i.kt)("p",null,"Serialize the view\u2019s dataset into a pandas dataframe."),(0,i.kt)("p",null,"If the view is aggregated, the aggregated dataset will be returned."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA DataFrame serialization of the current\n: state of this ",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"))),(0,i.kt)("h4",{id:"to_csvkwargs"},"to_csv(","*","*","kwargs)"),(0,i.kt)("p",null,"Serialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"\u2019s dataset into a CSV string."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to False)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to False)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"date_format")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 How ",(0,i.kt)("inlineCode",{parentName:"li"},"datetime")," objects should be\nformatted in the CSV."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA CSV-formatted string containing the serialized data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"str"))),(0,i.kt)("h4",{id:"to_jsonkwargs"},"to_json(","*","*","kwargs)"),(0,i.kt)("p",null,"Serialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"\u2019s dataset into a ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),"\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," containing each row."),(0,i.kt)("p",null,"By default, the entire dataset is returned, though this can be windowed\nvia ",(0,i.kt)("inlineCode",{parentName:"p"},"kwargs"),".  When ",(0,i.kt)("inlineCode",{parentName:"p"},"group_by")," are applied, a ",(0,i.kt)("inlineCode",{parentName:"p"},"__ROW_PATH__"),"\ncolumn name will be generated in addition to the applied ",(0,i.kt)("inlineCode",{parentName:"p"},"columns"),".\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"split_by")," are applied, column names will be qualified\nwith their column group name."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA list of ",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),", where each dict\n: represents a row of the current state of the\n",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"dict"))),(0,i.kt)("h4",{id:"to_columnskwargs"},"to_columns(","*","*","kwargs)"),(0,i.kt)("p",null,"Serialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"\u2019s dataset into a ",(0,i.kt)("inlineCode",{parentName:"p"},"dict"),"\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"str")," keys and ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," values.  Each key is a column name,\nand the associated value is the column\u2019s data packed into a ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),".\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," is aggregated, the aggregated dataset\nwill be returned."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_row")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_rows()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"start_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"end_col")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 (Defaults to\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View.num_columns()"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return a logical row ID for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return an implicit pkey for each\nrow (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"leaves_only")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to return only the data at the\nend of the tree (Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Returns:"),"\nA dictionary with string keys and list values, where\n: key = column name and value = column values."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Return type:"),(0,i.kt)("inlineCode",{parentName:"li"},"dict"),(0,i.kt)("inlineCode",{parentName:"li"},"perspective.core")," contains modules that implements ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective-python")," in various environments,\nmost notably ",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveWidget")," and the various Perspective web server handlers.")),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.core")," defines several enums that provide easy access to aggregate options, different plugins, sort directions etc."),(0,i.kt)("p",null,"For usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," and the Perspective web server handlers, see the User Guide in the sidebar."),(0,i.kt)("h3",{id:"perspectiveset_threadpool_sizenthreads"},"perspective.set_threadpool_size(nthreads)"),(0,i.kt)("p",null,"Sets the size of the global Perspective thread pool, up to the\ntotal number of available cores.  Passing an explicit\nNone sets this limit to the detected hardware concurrency from the\nenvironment, which is also the default if this method is never called.\nset_threadpool_size() must be called before any other\nperspective-python API calls, and cannot be changed after such a call."),(0,i.kt)("h2",{id:"perspectivewidget"},"PerspectiveWidget"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWidget")," is a Perspective integration into ",(0,i.kt)("a",{parentName:"p",href:"%5Bhttps://jupyterlab.readthedocs.io/en/stable%5D(https://jupyterlab.readthedocs.io/en/stable)"},"JupyterLab"),"."),(0,i.kt)("h3",{id:"class-perspectivewidgetwidgetperspectivewidgetkwargs-any"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.widget.widget.PerspectiveWidget(","*","*","kwargs: Any)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"DOMWidget"),", ",(0,i.kt)("a",{parentName:"p",href:"#perspective.viewer.viewer.PerspectiveViewer"},(0,i.kt)("inlineCode",{parentName:"a"},"PerspectiveViewer"))),(0,i.kt)("p",null,":class","`","~perspective.PerspectiveWidget","`"," allows for Perspective to be used\nin the form of a Jupyter IPython widget."),(0,i.kt)("p",null,"Using perspective.Table, you can create a widget that extends the full\nfunctionality of perspective-viewer.  Changes on the viewer can be\nprogramatically set on the :class","`","~perspective.PerspectiveWidget","`"," instance,\nand state is maintained across page refreshes."),(0,i.kt)("h5",{id:"examples-10"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from perspective import Table, PerspectiveWidget\n>>> data = {\n...     "a": [1, 2, 3],\n...     "b": [\n...         "2019/07/11 7:30PM",\n...         "2019/07/11 8:30PM",\n...         "2019/07/11 9:30PM"\n...     ]\n... }\n>>> tbl = Table(data, index="a")\n>>> widget = PerspectiveWidget(\n...     tbl,\n...     group_by=["a"],\n...     sort=[["b", "desc"]],\n...     filter=[["a", ">", 1]]\n... )\n>>> widget.sort\n[["b", "desc"]]\n>>> widget.sort.append(["a", "asc"])\n>>> widget.sort\n[["b", "desc"], ["a", "asc"]]\n>>> widget.update({"a": [4, 5]}) # Browser UI updates\n')),(0,i.kt)("h4",{id:"__init__data-indexnone-limitnone-serverfalse-clientfalse-kwargs"},"_","_","init_","_","(data, index=None, limit=None, server=False, client=False, ","*","*","kwargs)"),(0,i.kt)("p",null,"Initialize an instance of :class","`","~perspective.PerspectiveWidget","`","\nwith the given table/data and viewer configuration."),(0,i.kt)("p",null,"If a pivoted DataFrame or MultiIndex table is passed in, the widget\npreserves pivots and applies them.  See PerspectiveViewer.",(0,i.kt)("em",{parentName:"p"},"_","init"),"_"," for\narguments that transform the view shown in the widget."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"bytes"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 a\nperspective.Table instance, a perspective.View instance, or\na dataset to be loaded in the widget."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A column name to be used as the primary key.\nIgnored if server is True."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"limit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 A upper limit on the number of rows in the Table.\nCannot be set at the same time as index, ignored if server\nis True."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"server")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether to run Perspective in \u201cserver-only\u201d\nmode, where the front-end client does not have its own Table,\nand instead reads all data and operations from Python."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"client")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 If True, convert the dataset into an Apache Arrow\nbinary and create the Table in Javascript using a copy of the\ndata. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"kwargs")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),") \u2013 configuration options for the PerspectiveViewer,\nand Table constructor if data is a dataset.")))),(0,i.kt)("h5",{id:"examples-11"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> widget = PerspectiveWidget(\n...     {"a": [1, 2, 3]},\n...     aggregates={"a": "avg"},\n...     group_by=["a"],\n...     sort=[["b", "desc"]],\n...     filter=[["a", ">", 1]],\n...     expressions=[""a" + 100"])\n')),(0,i.kt)("h4",{id:"loaddata-options"},"load(data, ","*","*","options)"),(0,i.kt)("p",null,"Load the widget with data. If running in client mode, this method\nserializes the data and calls the browser viewer\u2019s load method.\nOtherwise, it calls Viewer.load() using super()."),(0,i.kt)("h4",{id:"updatedata"},"update(data)"),(0,i.kt)("p",null,"Update the widget with new data. If running in client mode, this\nmethod serializes the data and calls the browser viewer\u2019s update\nmethod. Otherwise, it calls Viewer.update() using super()."),(0,i.kt)("h4",{id:"clear-1"},"clear()"),(0,i.kt)("p",null,"Clears the widget\u2019s underlying Table."),(0,i.kt)("p",null,"In client mode, clears the ","_","data attribute of the widget."),(0,i.kt)("h4",{id:"replacedata-1"},"replace(data)"),(0,i.kt)("p",null,"Replaces the widget\u2019s Table with new data conforming to the same\nschema. Does not clear user-set state. If in client mode, serializes\nthe data and sends it to the browser."),(0,i.kt)("h4",{id:"deletedelete_tabletrue"},"delete(delete_table=True)"),(0,i.kt)("p",null,"Delete the Widget\u2019s data and clears its internal state. If running in\nclient mode, sends the delete() command to the browser. Otherwise\ncalls delete on the underlying viewer."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"delete_table")," (bool) \u2013 whether the underlying Table will be\ndeleted. Defaults to True.")),(0,i.kt)("h3",{id:"class-perspectiveviewerviewerperspectiveviewerkwargs-any"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.viewer.viewer.PerspectiveViewer(","*","*","kwargs: Any)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveTraitlets"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"PerspectiveViewer wraps the perspective.Table API and exposes an API\naround creating views, loading data, and updating data."),(0,i.kt)("h4",{id:"__init__plugindatagrid-columnsnone-group_bynone-split_bynone-aggregatesnone-sortnone-filternone-expressionsnone-plugin_confignone-settingstrue-themenone-titlenone"},"_","_","init_","_","(plugin='Datagrid', columns=None, group_by=None, split_by=None, aggregates=None, sort=None, filter=None, expressions=None, plugin_config=None, settings=True, theme=None, title=None)"),(0,i.kt)("p",null,"Initialize an instance of PerspectiveViewer with the given viewer\nconfiguration.  Do not pass a Table or data into the constructor -\nuse the ",(0,i.kt)("a",{parentName:"p",href:"#perspective.viewer.viewer.PerspectiveViewer.load"},(0,i.kt)("inlineCode",{parentName:"a"},"load()"))," method to provide the viewer with data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"columns")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names to be\nvisible to the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"group_by")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names to\nuse as group by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"split_by")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of column names\nto use as split by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"aggregates")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A dictionary\nof column names to aggregate types, which specify aggregates\nfor individual columns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sort")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of lists,\neach list containing a column name and a sort direction\n(",(0,i.kt)("inlineCode",{parentName:"li"},"asc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"desc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"asc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"desc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col asc"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"col desc"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col asc abs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"col desc abs"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"filter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of lists,\neach list containing a column name, a filter comparator, and a\nvalue to filter by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"expressions")," (",(0,i.kt)("inlineCode",{parentName:"li"},"list")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A list of string\nexpressions which are applied to the view."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plugin")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Plugin"),") \u2013 Which plugin to\nselect by default."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plugin_config")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),") \u2013 A configuration for the plugin, i.e.\nthe datagrid plugin or a chart plugin."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"settings")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 Whether the perspective query settings\npanel should be open."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"theme")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 The color theme to use.")))),(0,i.kt)("h5",{id:"examples-12"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> viewer = PerspectiveViewer(\n...     aggregates={"a": "avg"},\n...     group_by=["a"],\n...     sort=[["b", "desc"]],\n...     filter=[["a", ">", 1]],\n...     expressions=[""a" + 100"]\n... )\n')),(0,i.kt)("h4",{id:"property-table"},(0,i.kt)("em",{parentName:"h4"},"property")," table"),(0,i.kt)("p",null,"Returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," under management by the viewer."),(0,i.kt)("h4",{id:"loaddata-options-1"},"load(data, ","*","*","options)"),(0,i.kt)("p",null,"Given a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.View"),",\nor data that can be handled by ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table"),", pass it to the\nviewer.  Like ","_","_","init_","_",", load accepts a perspective.Table, a dataset,\nor a schema. If running in client mode, load defers to the browser\u2019s\nPerspective engine. This means that loading Python-only datasets,\nespecially ones that cannot be serialized into JSON, may cause some\nissues."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"load()")," resets the state of the viewer :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If a ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Table")," has already been  loaded, ",(0,i.kt)("inlineCode",{parentName:"li"},"**options")," is\nignored as the options already set on the ",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," take precedence."),(0,i.kt)("li",{parentName:"ul"},"If a ",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.View")," is loaded, the options on the\n",(0,i.kt)("inlineCode",{parentName:"li"},"perspective.Table")," linked to the view take precedence.")),(0,i.kt)("p",null,"If data is passed in, a ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective.Table")," is automatically created\nby this method, and the options passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"**config")," are extended to\nthe new Table.  If the widget already has a dataset, and the new data\nhas different columns to the old one, then the widget state (pivots,\nsort, etc.) is cleared to prevent applying settings on columns that\ndon\u2019t exist."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"View"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"bytes"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 a\nperspective.Table instance, a perspective.View instance, or\na dataset to be loaded in the viewer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"name")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 An optional name to reference the table by so it can\nbe accessed from the front-end. If not provided, a name will\nbe generated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"index")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 A column name to be used as the primary key.\nIgnored if a ",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"View")," is supplied."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"limit")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 A upper limit on the number of rows in the Table.\nCannot be set at the same time as index. Ignored if a\n",(0,i.kt)("inlineCode",{parentName:"li"},"Table")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"View")," is supplied.")))),(0,i.kt)("h5",{id:"examples-13"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> from perspective import Table, PerspectiveViewer\n>>> data = {"a": [1, 2, 3]}\n>>> tbl = Table(data)\n>>> viewer = PerspectiveViewer()\n>>> viewer.load(tbl)\n>>> viewer.load(data, index="a") # viewer state is reset\n>>> viewer2 = PerspectiveViewer()\n>>> viewer2.load(tbl.view())\n')),(0,i.kt)("h4",{id:"updatedata-1"},"update(data)"),(0,i.kt)("p",null,"Update the table under management by the viewer with new data.\nThis function follows the semantics of Table.update(), and will be\naffected by whether an index is set on the underlying table."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 the"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"table.")," (",(0,i.kt)("em",{parentName:"li"},"update data for the"),") \u2013 ")))),(0,i.kt)("h4",{id:"clear-2"},"clear()"),(0,i.kt)("p",null,"Clears the rows of this viewer\u2019s ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"."),(0,i.kt)("h4",{id:"replacedata-2"},"replace(data)"),(0,i.kt)("p",null,"Replaces the rows of this viewer\u2019s Table with new data."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"dict"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"list"),"|:obj:",(0,i.kt)("inlineCode",{parentName:"li"},"pandas.DataFrame"),") \u2013 new data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"schema.")," (",(0,i.kt)("em",{parentName:"li"},"to set into the table - must conform to the table's"),") \u2013 ")))),(0,i.kt)("h4",{id:"save"},"save()"),(0,i.kt)("p",null,"Get the viewer\u2019s attribute as a dictionary, symmetric with restore\nso that a viewer\u2019s configuration can be reproduced."),(0,i.kt)("h4",{id:"restorekwargs"},"restore(","*","*","kwargs)"),(0,i.kt)("p",null,"Restore a given set of attributes, passed as kwargs\n(e.g. dictionary). Symmetric with save so that a given viewer\u2019s\nconfiguration can be reproduced."),(0,i.kt)("h4",{id:"reset"},"reset()"),(0,i.kt)("p",null,"Resets the viewer\u2019s attributes and state, but does not delete or\nmodify the underlying Table."),(0,i.kt)("h5",{id:"examples-14"},"Examples"),(0,i.kt)("p",null,"widget = PerspectiveWidget(data, group_by=","[\u201cdate\u201d]",", plugin=Plugin.XBAR)\nwidget.reset()\nwidget.plugin  #"),(0,i.kt)("h4",{id:"deletedelete_tabletrue-1"},"delete(delete_table=True)"),(0,i.kt)("p",null,"Delete the Viewer\u2019s data and clears its internal state. If\n",(0,i.kt)("inlineCode",{parentName:"p"},"delete_table")," is True, the underlying perspective.Table and the\ninternal View object will be deleted."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"delete_table")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 whether the underlying Table will be\ndeleted. Defaults to True.")),(0,i.kt)("h2",{id:"perspective-webserver-handlers"},"Perspective Webserver Handlers"),(0,i.kt)("p",null,"Perspective provides several ready-made integrations with webserver libraries that interfaces seamlessly with\n",(0,i.kt)("inlineCode",{parentName:"p"},"@finos/perspective-viewer")," in Javascript."),(0,i.kt)("h3",{id:"class-perspectivehandlerstornadoperspectivetornadohandlerargs-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.handlers.tornado.PerspectiveTornadoHandler(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveHandlerBase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"WebSocketHandler")),(0,i.kt)("p",null,"PerspectiveTornadoHandler is a drop-in implementation of Perspective."),(0,i.kt)("p",null,"Use it inside Tornado routing to create a server-side Perspective that is\nready to receive websocket messages from the front-end perspective-viewer.\nBecause Tornado implements an event loop, this handler links Perspective\nwith IOLoop.current() in order to defer expensive operations until the\nnext free iteration of the event loop."),(0,i.kt)("p",null,"The Perspective client and server will automatically keep the Websocket\nalive without timing out."),(0,i.kt)("h5",{id:"examples-15"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> MANAGER = PerspectiveManager()\n>>> MANAGER.host_table("data_source_one", Table(\n...     pd.read_csv("superstore.csv")))\n>>> app = tornado.web.Application([\n...     (r"/", MainHandler),\n...     (r"/websocket", PerspectiveTornadoHandler, {\n...         "manager": MANAGER,\n...         "check_origin": True\n...     })\n... ])\n')),(0,i.kt)("h4",{id:"__init__args-kwargs"},"_","_","init_","_","(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Create a new instance of the PerspectiveHandlerBase with the\ngiven Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"manager")," (",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager"),") \u2013 A PerspectiveManager instance.\nMust be provided on initialization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(")," (",(0,i.kt)("em",{parentName:"li"},"check_origin"),") \u2013 obj","`","bool","`","): If True, all requests will be accepted\nregardless of origin. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Binary messages will not exceed this length\n(in bytes);  payloads above this limit will be chunked\nacross multiple messages. Defaults to 16_777_216 (16MB), and\nbe disabled entirely with None.")))),(0,i.kt)("h4",{id:"on_messageargs-kwargs"},"on_message(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"When the websocket receives a message, send it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"process"),"\nmethod of the PerspectiveManager with a reference to the ",(0,i.kt)("inlineCode",{parentName:"p"},"post"),"\ncallback."),(0,i.kt)("h4",{id:"async-write_messagemessage-str-binary-bool--false"},(0,i.kt)("em",{parentName:"h4"},"async")," write_message(message: str, binary: bool = False)"),(0,i.kt)("p",null,"Websocket-specific implementation of writing a message to the websocket client.\nMust support writing either text or binary messages. Should only be called by this\nclass\u2019s post function, which handles all the perspective-specific logic"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"message")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 the message to write"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"binary")," (",(0,i.kt)("em",{parentName:"li"},"bool**,")," ",(0,i.kt)("em",{parentName:"li"},"optional"),") \u2013 whether or not to write as binary buffer")))),(0,i.kt)("h3",{id:"class-perspectivehandlersstarletteperspectivestarlettehandlerkwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.handlers.starlette.PerspectiveStarletteHandler(","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveHandlerBase")),(0,i.kt)("p",null,"PerspectiveStarletteHandler is a drop-in implementation of Perspective."),(0,i.kt)("p",null,"The Perspective client and server will automatically keep the Websocket\nalive without timing out."),(0,i.kt)("h5",{id:"examples-16"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> MANAGER = PerspectiveManager()\n>>> MANAGER.host_table("data_source_one", Table(\n...     pd.read_csv("superstore.csv")))\n>>> app = FastAPI()\n>>> async def endpoint(websocket: Websocket):\n...     handler = PerspectiveStarletteHandler(manager, websocket)\n...     await handler.run()\n... app.add_api_websocket_route(\'/websocket\', endpoint)\n')),(0,i.kt)("h4",{id:"__init__kwargs"},"_","_","init_","_","(","*","*","kwargs)"),(0,i.kt)("p",null,"Create a new instance of the PerspectiveHandlerBase with the\ngiven Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"manager")," (",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager"),") \u2013 A PerspectiveManager instance.\nMust be provided on initialization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(")," (",(0,i.kt)("em",{parentName:"li"},"check_origin"),") \u2013 obj","`","bool","`","): If True, all requests will be accepted\nregardless of origin. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Binary messages will not exceed this length\n(in bytes);  payloads above this limit will be chunked\nacross multiple messages. Defaults to 16_777_216 (16MB), and\nbe disabled entirely with None.")))),(0,i.kt)("h4",{id:"async-write_messagemessage-str-binary-bool--false-1"},(0,i.kt)("em",{parentName:"h4"},"async")," write_message(message: str, binary: bool = False)"),(0,i.kt)("p",null,"Websocket-specific implementation of writing a message to the websocket client.\nMust support writing either text or binary messages. Should only be called by this\nclass\u2019s post function, which handles all the perspective-specific logic"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"message")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 the message to write"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"binary")," (",(0,i.kt)("em",{parentName:"li"},"bool**,")," ",(0,i.kt)("em",{parentName:"li"},"optional"),") \u2013 whether or not to write as binary buffer")))),(0,i.kt)("h3",{id:"class-perspectivehandlersaiohttpperspectiveaiohttphandlerkwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler(","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveHandlerBase")),(0,i.kt)("p",null,"PerspectiveAIOHTTPHandler is a drop-in implementation of Perspective."),(0,i.kt)("p",null,"Use it inside AIOHTTP routing to create a server-side Perspective that is\nready to receive websocket messages from the front-end perspective-viewer."),(0,i.kt)("p",null,"The Perspective client and server will automatically keep the Websocket\nalive without timing out."),(0,i.kt)("h5",{id:"examples-17"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},">>> manager = PerspectiveManager()\n>>> async def websocket_handler(request):\n...    handler = PerspectiveAIOHTTPHandler(manager=manager, request=request)\n...    await handler.run()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-pycon"},'>>> app = web.Application()\n>>> app.router.add_get("/websocket", websocket_handler)\n')),(0,i.kt)("h4",{id:"__init__kwargs-1"},"_","_","init_","_","(","*","*","kwargs)"),(0,i.kt)("p",null,"Create a new instance of the PerspectiveHandlerBase with the\ngiven Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"manager")," (",(0,i.kt)("inlineCode",{parentName:"li"},"PerspectiveManager"),") \u2013 A PerspectiveManager instance.\nMust be provided on initialization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"(")," (",(0,i.kt)("em",{parentName:"li"},"check_origin"),") \u2013 obj","`","bool","`","): If True, all requests will be accepted\nregardless of origin. Defaults to False."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"chunk_size")," (",(0,i.kt)("inlineCode",{parentName:"li"},"int"),") \u2013 Binary messages will not exceed this length\n(in bytes);  payloads above this limit will be chunked\nacross multiple messages. Defaults to 16_777_216 (16MB), and\nbe disabled entirely with None.")))),(0,i.kt)("h4",{id:"async-write_messagemessage-str-binary-bool--false-2"},(0,i.kt)("em",{parentName:"h4"},"async")," write_message(message: str, binary: bool = False)"),(0,i.kt)("p",null,"Websocket-specific implementation of writing a message to the websocket client.\nMust support writing either text or binary messages. Should only be called by this\nclass\u2019s post function, which handles all the perspective-specific logic"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"message")," (",(0,i.kt)("em",{parentName:"li"},"str"),") \u2013 the message to write"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"binary")," (",(0,i.kt)("em",{parentName:"li"},"bool**,")," ",(0,i.kt)("em",{parentName:"li"},"optional"),") \u2013 whether or not to write as binary buffer")))),(0,i.kt)("h2",{id:"perspective-websocket-clients"},"Perspective Websocket Clients"),(0,i.kt)("p",null,"Perspective also provides several client interfaces to integrate with the above Perspective webserver handlers."),(0,i.kt)("h3",{id:"class-perspectiveclienttornadotornadoperiodicargs-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.client.tornado.TornadoPeriodic(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"Periodic")),(0,i.kt)("h3",{id:"class-perspectiveclienttornadoperspectivetornadowebsocketconnection"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.client.tornado.PerspectiveTornadoWebsocketConnection"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWebsocketConnection")),(0,i.kt)("h3",{id:"async-perspectiveclienttornadowebsocketurl"},(0,i.kt)("em",{parentName:"h3"},"async")," perspective.client.tornado.websocket(url)"),(0,i.kt)("p",null,"Create a new websocket client at the given url using the thread current\ntornado loop."),(0,i.kt)("h3",{id:"class-perspectiveclientaiohttpaiohttpperiodicargs-kwargs"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.client.aiohttp.AIOHTTPPeriodic(","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"Periodic")),(0,i.kt)("h3",{id:"class-perspectiveclientaiohttpperspectiveaiohttpwebsocketconnectionsessionnone"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.client.aiohttp.PerspectiveAIOHTTPWebsocketConnection(session=None)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveWebsocketConnection")),(0,i.kt)("h3",{id:"async-perspectiveclientaiohttpwebsocketurl-sessionnone"},(0,i.kt)("em",{parentName:"h3"},"async")," perspective.client.aiohttp.websocket(url, session=None)"),(0,i.kt)("p",null,"Create a new websocket client at the given url."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"session")," (",(0,i.kt)("inlineCode",{parentName:"li"},"aiohttp.ClientSession"),") \u2013 An optional aiohtttp session")),(0,i.kt)("h2",{id:"perspectivemanager"},"PerspectiveManager"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," implements a communication protocol between Perspective runtimes in different languages.\nThrough its ",(0,i.kt)("inlineCode",{parentName:"p"},"process()")," method, it allows runtimes to communicate instructions and interoperate."),(0,i.kt)("h3",{id:"class-perspectivemanagermanagerperspectivemanagerlockfalse"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.manager.manager.PerspectiveManager(lock=False)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"_PerspectiveManagerInternal")),(0,i.kt)("p",null,"PerspectiveManager is an orchestrator for running Perspective on the\nserver side."),(0,i.kt)("p",null,"The core functionality resides in process(), which receives\nJSON-serialized messages from a client (implemented by perspective-viewer\nin the browser), executes the commands in the message, and returns the\nresults of those commands back to the post_callback. Table instances\nshould be passed to the manager using host_table - this allows server\ncode to call Table APIs natively instead of proxying them through the\nManager. Because Perspective is designed to be used in a shared context,\ni.e. multiple clients all accessing the same Table, PerspectiveManager\ncomes with the context of sessions - an encapsulation of the actions\nand resources used by a single connection to Perspective, which can be\ncleaned up after the connection is closed."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When a client connects, for example through a websocket, a new session\n: should be spawned using new_session()."),(0,i.kt)("li",{parentName:"ul"},"When the websocket closes, call close() on the session instance to\n: clean up associated resources.")),(0,i.kt)("h4",{id:"__init__lockfalse"},"_","_","init_","_","(lock=False)"),(0,i.kt)("p",null,"Create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("strong",{parentName:"li"},"lock")," (",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),") \u2013 ","[description]",". Defaults to False.")),(0,i.kt)("h4",{id:"lock"},"lock()"),(0,i.kt)("p",null,"Block messages that can mutate the state of ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),"\nobjects under management."),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveManager")," objects exposed over the internet should be\nlocked to prevent content from being mutated by clients."),(0,i.kt)("h4",{id:"unlock"},"unlock()"),(0,i.kt)("p",null,"Unblock messages that can mutate the state of\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," objects under management."),(0,i.kt)("h4",{id:"hostitem-namenone"},"host(item, name=None)"),(0,i.kt)("p",null,"Given a ",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", place it under management and\nallow operations on it to be passed through the Manager instance."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Parameters:"),(0,i.kt)("strong",{parentName:"li"},"item")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Table"),") \u2013 a Table to be managed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Keyword Arguments:"),(0,i.kt)("strong",{parentName:"li"},"name")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),") \u2013 an optional name to allow retrieval through\n",(0,i.kt)("inlineCode",{parentName:"li"},"get_table"),". A name will be generated if not provided.")),(0,i.kt)("h4",{id:"host_tablename-table"},"host_table(name, table)"),(0,i.kt)("p",null,"Given a reference to a Table, manage it and allow operations on it\nto occur through the Manager."),(0,i.kt)("p",null,"If a function for queue_process is defined (i.e., by\n",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveTornadoHandler"),"), bind the function to\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and have it call the manager\u2019s version of\nqueue_process."),(0,i.kt)("h4",{id:"get_tablename"},"get_table(name)"),(0,i.kt)("p",null,"Return a table under management by name."),(0,i.kt)("h4",{id:"get_table_names"},"get_table_names()"),(0,i.kt)("p",null,"Return the tables that are hosted with this manager by name."),(0,i.kt)("h4",{id:"call_loopf-args-kwargs"},"call_loop(f, ","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Calls f() on this PerspectiveManager\u2019s event loop if it has one,\nor raise a PerspectiveError if there is no loop callback set using\nset_loop_callback()."),(0,i.kt)("h4",{id:"set_loop_callbackloop_callback-args-kwargs"},"set_loop_callback(loop_callback, ","*","args, ","*","*","kwargs)"),(0,i.kt)("p",null,"Sets this PerspectiveManager to run in Async mode, defering\nupdate() application and releasing the GIL for expensive operations."),(0,i.kt)("p",null,"Once called, this PerspectiveManager and all Perspective objects it\nhosts must only be interacted with from the same thread."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Parameters:")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"loop_callback")," \u2013 A function which accepts a function reference and\nits args/kwargs, and schedules it to run on the same thread\non which set_loop_callback()","`"," was originally invoked.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"*","args")," \u2013 Values to pass as the first arguments to every\ninvocation of loop_callbkac, dsimilar to functools.partial()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"*","*","kwargs")," \u2013 "),(0,i.kt)("p",{parentName:"li"},"Values to pass as the first arguments to every\ninvocation of loop_callbkac, dsimilar to functools.partial()"))))),(0,i.kt)("h3",{id:"perspectivemanagersessionrandom"},"perspective.manager.session.random()"),(0,i.kt)("h3",{id:"class-perspectivemanagersessionperspectivesessionmanager"},(0,i.kt)("em",{parentName:"h3"},"class")," perspective.manager.session.PerspectiveSession(manager)"),(0,i.kt)("p",null,"Bases: ",(0,i.kt)("inlineCode",{parentName:"p"},"object")),(0,i.kt)("p",null,"Encapsulates the actions and resources of a single connection to\nPerspective."),(0,i.kt)("h4",{id:"__init__manager"},"_","_","init_","_","(manager)"),(0,i.kt)("p",null,"Create a new session object, keeping track of a unique client_id and\nthe manager the session belongs to."),(0,i.kt)("p",null,"PerspectiveSession should not be constructed directly. Instead, use\nPerspectiveManager.new_session() to create a new session."),(0,i.kt)("h4",{id:"processmessage-post_callback"},"process(message, post_callback)"),(0,i.kt)("p",null,"Pass a message to the manager\u2019s process method, which passes the\nresult to post_callback."),(0,i.kt)("p",null,"Additionally, intercept calls to on_update in order\nto track the callbacks that were created through this session. This\nallows for cleaning up callbacks after a session closes, which may not\nnecessarily involve calling delete() on associated views."),(0,i.kt)("h4",{id:"close"},"close()"),(0,i.kt)("p",null,"Remove the views and callbacks that were created within this session\nwhen the session ends."))}m.isMDXComponent=!0}}]);